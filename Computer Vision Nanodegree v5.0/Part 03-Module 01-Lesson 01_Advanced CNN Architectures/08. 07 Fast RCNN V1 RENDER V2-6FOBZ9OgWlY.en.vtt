WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.639
The next advancement in region-based CNNs came with the Fast R-CNN architecture.

00:00:05.639 --> 00:00:10.644
Instead of processing each region of interest individually through a classification CNN,

00:00:10.644 --> 00:00:15.719
this architecture runs the entire image through a classification CNN only once.

00:00:15.720 --> 00:00:18.179
The image goes through a series of convolutional and

00:00:18.179 --> 00:00:20.535
pooling layers and at the end of these layers,

00:00:20.535 --> 00:00:22.539
we get a stack of feature maps.

00:00:22.539 --> 00:00:27.314
We still need to identify regions of interest but instead of cropping the original image,

00:00:27.315 --> 00:00:31.230
we project these proposals into the smaller feature map layer.

00:00:31.230 --> 00:00:36.380
Each region in the feature map corresponds to a larger region in the original image.

00:00:36.380 --> 00:00:40.800
So we can grab selected regions in this feature map and feed them one by

00:00:40.799 --> 00:00:42.839
one into a fully connected layer that

00:00:42.840 --> 00:00:45.660
generates a class for each of these different regions.

00:00:45.659 --> 00:00:49.000
In this model we complete the most time-consuming steps,

00:00:49.000 --> 00:00:52.710
processing an image through a series of convolutional layers only

00:00:52.710 --> 00:00:57.060
once and then selectively use that map to get our desired outputs.

00:00:57.060 --> 00:01:00.750
Again, we have to handle the variable sizes and these protections,

00:01:00.750 --> 00:01:04.784
since layers further in the network are expecting input of a fixed size.

00:01:04.784 --> 00:01:08.715
So, we do something called ROI pooling to warp these regions

00:01:08.715 --> 00:01:12.750
into a consistent size before giving them to a fully connected layer.

00:01:12.750 --> 00:01:15.859
Now this network is faster than R-CNN but

00:01:15.859 --> 00:01:18.769
it's still slow when faced with a test image for which it

00:01:18.769 --> 00:01:21.560
has to generate region proposals and it's still

00:01:21.560 --> 00:01:24.590
looking at regions that do not contain objects at all.

00:01:24.590 --> 00:01:28.810
The next architecture we'll look at aims to improve this region generation step.

