WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.459
我讲解下我最喜欢的方法 叫做 Graph SLAM

00:00:03.459 --> 00:00:06.049
这是多种 SLAM 方法之一

00:00:06.049 --> 00:00:09.074
也是最容易解释的方法

00:00:09.074 --> 00:00:10.889
假设有一个机器人

00:00:10.890 --> 00:00:14.130
随意设定初始位置

00:00:14.130 --> 00:00:16.425
x = 0 y = 0

00:00:16.425 --> 00:00:19.830
对于此示例 假设机器人有一个完美的指南针

00:00:19.829 --> 00:00:23.189
我们不关心前进方向 使问题更简单

00:00:23.190 --> 00:00:28.865
假设机器人朝右移动 10 个单位 现在在这里

00:00:28.864 --> 00:00:30.500
在完美的情境中

00:00:30.500 --> 00:00:32.250
我们知道移动之后的位置 x1

00:00:32.250 --> 00:00:36.689
与 x0 + 10 相同

00:00:36.689 --> 00:00:39.479
y1 与 y0 相同

00:00:39.479 --> 00:00:43.769
但是根据各种卡尔曼滤波器课程及其他知识

00:00:43.770 --> 00:00:46.410
我们知道位置实际上是不确定的

00:00:46.409 --> 00:00:47.779
我们不再假设在 X-Y 坐标系里

00:00:47.780 --> 00:00:51.844
机器人正好往右移动 10 个单位

00:00:51.844 --> 00:00:57.019
我们知道实际位置是以 (10,0) 为中心的高斯分布

00:00:57.020 --> 00:00:59.885
有可能在其他位置

00:00:59.884 --> 00:01:02.515
我们得出了此高斯分布的数学公式

00:01:02.515 --> 00:01:05.195
对于 x 变量来说是这样的

00:01:05.194 --> 00:01:08.974
我们不是将 x1 设为 x0 + 10

00:01:08.974 --> 00:01:14.259
而是尝试表示出这两项相同时达到峰值的高斯分布

00:01:14.260 --> 00:01:16.370
如果用 x1 减去 x0 和 10

00:01:16.370 --> 00:01:19.910
放在平方根中

00:01:19.909 --> 00:01:21.709
变成高斯函数

00:01:21.709 --> 00:01:26.250
得出 x1 和 x0 之间的概率分布

00:01:26.250 --> 00:01:28.379
可以对 y 进行相同的分析流程

00:01:28.379 --> 00:01:31.500
根据动作规律 y 没有变化

00:01:31.500 --> 00:01:36.364
表明 y1 和 y0 非常接近

00:01:36.364 --> 00:01:41.099
这两个高斯函数的积现在是约束条件

00:01:41.099 --> 00:01:44.953
当位置 x0 是 (0,0) 时

00:01:44.953 --> 00:01:49.469
我们希望最大化位置 x1 的似然率

00:01:49.469 --> 00:01:52.530
Graph SLAM 的作用是

00:01:52.530 --> 00:01:58.015
使用此类约束条件序列定义概率

00:01:58.015 --> 00:02:02.864
假设有个在某个空间里移动的机器人

00:02:02.864 --> 00:02:08.579
每个位置用向量 x0 向量 x1

00:02:08.580 --> 00:02:10.770
向量 x2 和向量 x3 表示

00:02:10.770 --> 00:02:12.675
通常是三维向量

00:02:12.675 --> 00:02:16.200
Graph SLAM 会收集初始位置

00:02:16.199 --> 00:02:18.129
通常是 (0,0,0)

00:02:18.129 --> 00:02:20.189
在这里看起来有点不同

00:02:20.189 --> 00:02:23.870
很重要的是 很多相对约束条件

00:02:23.870 --> 00:02:27.480
将每个机器人姿势与之前的姿势相关联

00:02:27.479 --> 00:02:29.954
称为相对动作约束条件

00:02:29.955 --> 00:02:32.140
可以看做橡皮筋

00:02:32.139 --> 00:02:34.699
从预期角度来讲 这个橡皮筋

00:02:34.699 --> 00:02:37.713
将完全呈现机器人感知或命令的动作

00:02:37.713 --> 00:02:43.189
但在实际中 可能需要稍微弯曲一下 使地图更一致

00:02:43.189 --> 00:02:46.500
说到地图 我们用地标作为示例

00:02:46.500 --> 00:02:48.280
假设这里有个地标

00:02:48.280 --> 00:02:54.020
机器人以相对测量值 z0 z1 看到了该地标

00:02:54.020 --> 00:02:55.939
或许甚至没有在 z2 看到

00:02:55.939 --> 00:02:57.849
这是 z3

00:02:57.849 --> 00:03:00.709
所有这些也是相对约束条件

00:03:00.709 --> 00:03:02.759
和之前的很像

00:03:02.759 --> 00:03:04.769
它们是通过高斯分布发现的

00:03:04.770 --> 00:03:07.280
我们获得了相对测量约束条件

00:03:07.280 --> 00:03:10.449
每次机器人看到地标 都有一个此类约束条件

00:03:10.449 --> 00:03:13.905
Graph SLAM 会收集这些约束条件

00:03:13.905 --> 00:03:16.650
我们将发现 这些约束条件非常容易收集

00:03:16.650 --> 00:03:19.400
通过这组橡皮筋

00:03:19.400 --> 00:03:24.659
沿着地标位置发现最有可能的机器人路径配置

00:03:24.659 --> 00:03:27.134
这就是地图构建流程

00:03:27.134 --> 00:03:28.739
布置一道小练习

00:03:28.740 --> 00:03:30.180
需要思考下

00:03:30.180 --> 00:03:32.760
假设有 6 个机器人姿势

00:03:32.759 --> 00:03:35.269
一个是初始位置 五个是移动之后的位置

00:03:35.270 --> 00:03:38.675
有 8 个见过的地标测量值

00:03:38.675 --> 00:03:39.890
可能是多个地标

00:03:39.889 --> 00:03:41.349
某些不动 因此超过 1 个

00:03:41.349 --> 00:03:42.599
问题是

00:03:42.599 --> 00:03:44.989
如果将每个约束条件正好当做一个约束条件

00:03:44.990 --> 00:03:49.040
总共有多少个约束条件

