WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.575
根据我们见过的示例

00:00:01.575 --> 00:00:04.004
YOLO 非常适合处理有多个对象

00:00:04.004 --> 00:00:07.035
并且每个对象都与一个网格单元相关联的情形

00:00:07.035 --> 00:00:08.919
但是如果出现重叠呢？

00:00:08.919 --> 00:00:13.800
一个网格单元实际上包含两个不同对象的中心点

00:00:13.800 --> 00:00:16.440
这时候 我们可以使用锚点框

00:00:16.440 --> 00:00:19.775
使一个网格单元检测多个对象

00:00:19.774 --> 00:00:24.784
在这个图像中 我们看到有一个人和一辆车重叠了

00:00:24.785 --> 00:00:26.695
车的某些部分被遮挡了

00:00:26.695 --> 00:00:29.800
还可以看出车辆和行人的边界框中心

00:00:29.800 --> 00:00:33.100
都位于相同的网格单元中

00:00:33.100 --> 00:00:37.125
因为每个网格单元的输出向量只能有一个类别

00:00:37.125 --> 00:00:40.960
因此它必须选择车辆或行人

00:00:40.960 --> 00:00:43.105
但是定义锚点框后

00:00:43.104 --> 00:00:45.519
我们可以创建一个更长的网格单元向量

00:00:45.520 --> 00:00:48.695
使每个网格单元都可以与多个类别关联

00:00:48.695 --> 00:00:53.534
我们定义两个具有初始宽和高的锚点框

00:00:53.534 --> 00:00:57.734
在实际操作中 你可以定义多个锚点框

00:00:57.734 --> 00:01:01.954
你可以将这些方框想象成礼品盒的两种不同形状

00:01:01.954 --> 00:01:06.810
你通常选择的礼品盒可以装下任何物品

00:01:06.810 --> 00:01:09.210
我们希望定义锚点框

00:01:09.209 --> 00:01:12.349
使其能够涵盖我们想检测的各种对象形状

00:01:12.349 --> 00:01:15.719
锚点框具有固定的宽高比

00:01:15.719 --> 00:01:20.075
它们会尝试检测具有该宽高比并且可完美融入的对象

00:01:20.075 --> 00:01:24.659
例如 因为我们要检测很宽的汽车和站着的行人

00:01:24.659 --> 00:01:28.349
我们将定义一个形状大致是汽车形状的锚点框

00:01:28.349 --> 00:01:30.869
这个方框的宽比高大

00:01:30.870 --> 00:01:35.025
然后定义另一个能在里面填充站立行人的锚点框

00:01:35.025 --> 00:01:37.170
高比宽大

00:01:37.170 --> 00:01:42.704
现在修改每个网格单元的输出向量 以便包含这两个锚点框

00:01:42.704 --> 00:01:44.760
其中包含坐标和类别得分

00:01:44.760 --> 00:01:48.650
输出向量现在将包含 16 个元素

00:01:48.650 --> 00:01:52.230
前 8 个元素对应锚点框 1

00:01:52.230 --> 00:01:55.109
后 8 个元素对应锚点框 2

00:01:55.109 --> 00:02:00.575
因为汽车周围的边界框相对于锚点框 1 来说 IoU 更高

00:02:00.575 --> 00:02:03.370
输出向量的锚点 1 元素将包含

00:02:03.370 --> 00:02:06.775
汽车的类别和方框参数

00:02:06.775 --> 00:02:12.055
同样 因为行人周围的边界框相对于锚点框 2 来说 IoU 更高

00:02:12.055 --> 00:02:15.969
锚点 2 元素将包含行人的参数

00:02:15.969 --> 00:02:21.098
即使人类都很难识别场景中重叠的对象

00:02:21.098 --> 00:02:24.549
而锚点框使我们做到了这一点 很酷

00:02:24.550 --> 00:02:27.100
但是和很多对象检测方法一样

00:02:27.099 --> 00:02:28.674
它也有局限性

00:02:28.675 --> 00:02:31.825
假设有两个重叠的人

00:02:31.824 --> 00:02:34.299
此算法将检查哪个人与锚点框 1 相匹配

00:02:34.300 --> 00:02:37.515
哪个人与锚点框 2 相匹配

00:02:37.514 --> 00:02:41.529
它只能将每种锚点框与一个对象相关联

00:02:41.530 --> 00:02:42.969
如果两个重叠对象的形状大致一样

00:02:42.969 --> 00:02:46.009
该算法效果就不太好

00:02:46.009 --> 00:02:51.274
同样 如果你只定义了两个锚点框 但是有三个重叠对象

00:02:51.275 --> 00:02:55.849
那么此算法将失败 因为它只能识别其中两个对象

00:02:55.849 --> 00:02:59.134
好消息是这些情况很少见

00:02:59.134 --> 00:03:02.079
在下个视频中 我们将了解 YOLO 如何结合使用这些技巧

00:03:02.080 --> 00:03:06.440
对复杂的图像进行对象检测

