{
  "data": {
    "lesson": {
      "id": 615098,
      "key": "440355da-85d9-4a1a-8df3-75e80d5b4b2d",
      "title": "Applying Deep Learning Models",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Try out a few really cool applications of computer vision and deep learning, such as style transfer, using pre-trained models that others have generously provided on Github. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/440355da-85d9-4a1a-8df3-75e80d5b4b2d/615098/1544453308805/Applying+Deep+Learning+Models+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/440355da-85d9-4a1a-8df3-75e80d5b4b2d/615098/1544453306270/Applying+Deep+Learning+Models+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 615102,
          "key": "4d139386-3489-4bab-a1a6-a9365a692bdf",
          "title": "Style Transfer",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4d139386-3489-4bab-a1a6-a9365a692bdf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Rain-Princess",
                "uri": "https://video.udacity-data.com/topher/2018/April/5adee045_rain-princess/rain-princess.ckpt"
              },
              {
                "name": "La-Muse",
                "uri": "https://video.udacity-data.com/topher/2018/April/5adee061_la-muse/la-muse.ckpt"
              },
              {
                "name": "Udnie",
                "uri": "https://video.udacity-data.com/topher/2018/April/5adee07e_udnie/udnie.ckpt"
              },
              {
                "name": "Scream",
                "uri": "https://video.udacity-data.com/topher/2018/April/5adee095_scream/scream.ckpt"
              },
              {
                "name": "Wreck",
                "uri": "https://video.udacity-data.com/topher/2018/April/5adee0ab_wreck/wreck.ckpt"
              },
              {
                "name": "Wave",
                "uri": "https://video.udacity-data.com/topher/2018/April/5adee0d5_wave/wave.ckpt"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 615103,
              "key": "d6167d0a-095e-43cd-8ac9-0d7509e4a077",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Style Transfer\n\nAs an example of the kind of things you'll be building with deep learning models, here is a really fun project, [fast style transfer](https://github.com/lengstrom/fast-style-transfer). Style transfer allows you to take famous paintings, and recreate your own images in their styles! The network learns the underlying techniques of those paintings and figures out how to apply them on its own. This model was trained on the styles of famous paintings and is able to transfer those styles to other images and [even videos](https://www.youtube.com/watch?v=xVJwwWQlQ1o)!\n\nMat Leonard, the product lead for the school of AI, used it to style his cat Chihiro in the style of [Hokusai](https://en.wikipedia.org/wiki/Hokusai)'s  [*The Great Wave Off Kanagawa*](https://en.wikipedia.org/wiki/The_Great_Wave_off_Kanagawa).",
              "instructor_notes": ""
            },
            {
              "id": 615104,
              "key": "c62a72f6-9a8c-462e-b9e7-c110ad075edc",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adedc57_screen-shot-2018-04-24-at-12.27.00-am/screen-shot-2018-04-24-at-12.27.00-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c62a72f6-9a8c-462e-b9e7-c110ad075edc",
              "caption": "Mat's cat in the style of Hokusai.",
              "alt": "",
              "width": 600,
              "height": 100,
              "instructor_notes": null
            },
            {
              "id": 615105,
              "key": "28da4e51-562c-4d15-8d89-e82a7625ff52",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To try it out yourself, you can find the code in the [fast-style-transfer GitHub repo](https://github.com/lengstrom/fast-style-transfer). Either use `git` to clone the repository, or you can download the whole thing as a Zip archive and extract it.\n\nThe network has been trained on a few different styles ([here](https://github.com/lengstrom/fast-style-transfer/tree/master/examples/style)) and saved into [checkpoint files](https://drive.google.com/drive/folders/0B9jhaT37ydSyRk9UX0wwX3BpMzQ). Checkpoint files contain all the information about the trained network to apply styles to new images.\n\n## Dependencies\n\nThe easiest way to install all the packages needed to run this code is with [Miniconda](http://conda.pydata.org/miniconda.html), a smaller version of [Anaconda](https://www.continuum.io/downloads). Miniconda comes with Conda, a package and environment manager built specifically for data science. Install the Python 3 version of Miniconda appropriate for your operating system.\n\nIf you haven't used Conda before, please quickly run through the Anaconda lesson (Lesson 3 on this part).\n\n### Windows\n\nFor Windows, you'll need to install TensorFlow 0.12.1, Python 3.5, Pillow 3.4.2, scipy 0.18.1, and numpy 1.11.2.  After installing Miniconda, open your command prompt. In there, enter these commands line by line:\n\n```bash\nconda create -n style-transfer python=3\nactivate style-transfer\nconda install tensorflow scipy pillow\npip install moviepy\npython -c \"import imageio; imageio.plugins.ffmpeg.download()\"\n```\n\n### OS X and Linux \n\nFor OS X and Linux, you'll need to install TensorFlow 0.11.0, Python 2.7.9, Pillow 3.4.2, scipy 0.18.1, and numpy 1.11.2.  \n\nIn your terminal, enter this commands line by line:\n\n```bash\nconda create -n style-transfer python=3\nactivate style-transfer\nconda install tensorflow scipy pillow\npip install moviepy\npython -c \"import imageio; imageio.plugins.ffmpeg.download()\"\n```\n\nLetâ€™s take a quick look at what these commands do. The first line in both sets of instructions, creates a new environment with Python 3. This environment will hold all the packages you need for the style transfer code. The next line enters the environment.  Next, we install TensorFlow, SciPy, Pillow (which is an image processing library), and moviepy. The last line here installs ffmpeg, an application for converting images and videos.\n",
              "instructor_notes": ""
            },
            {
              "id": 615106,
              "key": "20e76047-cb36-43fb-81a0-3b478d02d352",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Transferring styles\n\n1. Download the Zip archive from (or clone) the [fast-style-transfer](https://github.com/lengstrom/fast-style-transfer) repository and extract it. You can download it by clicking on the bright green button on the right.\n2. Download the Rain Princess checkpoint from [here](https://d17h27t6h515a5.cloudfront.net/topher/2017/January/587d1865_rain-princess/rain-princess.ckpt). Put it in the fast-style-transfer folder. A checkpoint file is a model that already has tuned parameters. By using this checkpoint file, we won't need to train the model and can get straight to applying it.\n3. Copy the image you want to style into the fast-style-transfer folder.\n4. Enter the Conda environment you created above, if you aren't still in it.\n\nFinally, in your terminal, navigate to the fast-style-transfer folder and enter\n```bash\npython evaluate.py --checkpoint ./rain-princess.ckpt --in-path <path_to_input_file> --out-path ./output_image.jpg\n```\n\n> **Note:** Your checkpoint file might be named `rain_princess.ckpt`, notice the underscore, it's not the dash from above.\n\nYou can get more checkpoint files at the bottom of this page. Try them all!\n\n> **Note:** Be careful with the size of the input image. The style transfer can take quite a while to run on larger images.",
              "instructor_notes": ""
            },
            {
              "id": 615107,
              "key": "f6931a03-3e2e-46c3-a206-1977941336a4",
              "title": "Style Transfer Checklist",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f6931a03-3e2e-46c3-a206-1977941336a4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Apply style transfer to an image of yourself or something personal to you.",
                "Share your image on Twitter with the #MadeWithUdacity hashtag."
              ],
              "positive_feedback": "Great job using deep learning to perform style transfer!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 615108,
              "key": "a316c4e9-09f1-47fa-a876-0eb4c489ef74",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The checkpoints were trained on the following paintings:\n\n* Rain Princesss, by [Leonid Afremov](https://afremov.com/Leonid-Afremov-bio.html)\n* La Muse, by [Pablo Picasso](https://en.wikipedia.org/wiki/Pablo_Picasso)\n* Udnie by [Francis Picabia](https://en.wikipedia.org/wiki/Francis_Picabia)\n* Scream, by [Edvard Munch](https://en.wikipedia.org/wiki/Edvard_Munch)\n* The Great Wave off Kanagawa, by [Hokusai](https://en.wikipedia.org/wiki/Hokusai)\n* The Shipwreck of the Minotaur, by [J.M.W. Turner](https://en.wikipedia.org/wiki/J._M._W._Turner)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 615109,
          "key": "e4013bc8-d29d-4d86-aa5b-89a5570c4068",
          "title": "DeepTraffic",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e4013bc8-d29d-4d86-aa5b-89a5570c4068",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 615110,
              "key": "384acc0a-b977-47d4-a2f9-9e376835c518",
              "title": "NavegaÃ§Ã£o de trÃ¡fico 3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "az5ElmV4DhY",
                "china_cdn_id": "az5ElmV4DhY.mp4"
              }
            },
            {
              "id": 615111,
              "key": "7f17a3e6-d93f-45b0-80cc-c57f00c08bed",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## DeepTraffic\n\nAnother great application of deep learning is in simulating traffic and making driving decisions. You can find the DeepTraffic simulator [here](https://selfdrivingcars.mit.edu/deeptraffic/). The network here is attempting to learn a driving strategy such that the car is moving as fast as possible using [reinforcement learning](https://en.wikipedia.org/wiki/Reinforcement_learning). The network is rewarded when the car chooses actions that result in it moving fast. It's this feedback that allows the network to find a strategy of actions for optimal speed.\n\nTo learn more about setting the parameters and training the network, read the [overview here](https://selfdrivingcars.mit.edu/deeptraffic/).\n\nDiscuss how you built your network and your results with your fellow students in the #general channel on Slack.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 262189,
          "key": "88972d8b-e8a9-4789-ae79-6077db50dad9",
          "title": "Flappy Bird",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "88972d8b-e8a9-4789-ae79-6077db50dad9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 262190,
              "key": "48a62f68-4b20-43af-ac08-463d107cff31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Flappy Bird\n\nIn this example, you'll get to see a deep learning agent playing Flappy Bird! You have the option to train the agent yourself, but for now let's just start with the pre-trained network given by the author. Note that the following agent is able to play without being told any information about the structure of the game or its rules. It automatically discovers the rules of the game by finding out how it did on each iteration.\n\nWe will be following [this repository](https://github.com/yenchenlin/DeepLearningFlappyBird) by Yenchen Lin.",
              "instructor_notes": ""
            },
            {
              "id": 262191,
              "key": "09e36dde-02ab-4a25-bd2d-f7d2f0334ab7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588acc5c_flappy-bird/flappy-bird.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/09e36dde-02ab-4a25-bd2d-f7d2f0334ab7",
              "caption": "",
              "alt": null,
              "width": 810,
              "height": 456,
              "instructor_notes": null
            },
            {
              "id": 262192,
              "key": "f76787f6-a04e-4bda-8ac8-0141da018c6f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Instructions\n\n1. Install miniconda or anaconda if you have not already.\n2. Create an environment for flappybird\n    * Mac/Linux: `conda create --name=flappybird python=2.7`\n    * Windows: `conda create --name=flappybird python=3.5`\n3. Enter your conda environment:  `conda activate flappybird`\n4. `conda install opencv` \n    * If you encounter an error here, you may try an **alternate** download path and *instead* type `conda install --channel https://conda.anaconda.org/menpo opencv3`\n5. `pip install pygame`\n6. `pip install tensorflow==0.12`\n7. `git clone https://github.com/yenchenlin/DeepLearningFlappyBird.git`\n    * If you don't have git installed, you can download and extract the zip archive directly from [the repository](https://github.com/yenchenlin/DeepLearningFlappyBird)\n8. `cd DeepLearningFlappyBird`\n    * If you downloaded the archive, you will need to navigate to the extracted folder **DeepLearningFlappyBird-master** instead\n9. `python deep_q_network.py`\n\nIf all went correctly, you should be seeing a deep learning based agent play Flappy Bird! The repository contains instructions for training your own agent if you're interested!\n\nYou can also, typically, force-quit out of the game by returning to your terminal window and typing `Command or Ctrl + C`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 262178,
          "key": "eb539882-9057-4c4f-ad33-5eb23837474f",
          "title": "Books to Read",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eb539882-9057-4c4f-ad33-5eb23837474f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 262187,
              "key": "0ed5414f-17b9-4118-a74b-4fc8b4cc15b9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588aca59_grokking-deep-learning/grokking-deep-learning.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0ed5414f-17b9-4118-a74b-4fc8b4cc15b9",
              "caption": "",
              "alt": null,
              "width": 399,
              "height": 499,
              "instructor_notes": null
            },
            {
              "id": 262179,
              "key": "79893164-9704-4714-80b2-d27e91865db4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Books to read\n\nWe believe that you learn best when you are exposed to multiple perspectives on the same idea. As such, we recommend checking out a few of the books below to get an added perspective on Deep Learning.\n\n* [Grokking Deep Learning](https://www.manning.com/books/grokking-deep-learning) by Andrew Trask. Use our exclusive discount code **traskud17** for 40% off. This provides a very gentle introduction to Deep Learning and covers the intuition more than the theory.\n\n\n* [Neural Networks And Deep Learning](http://neuralnetworksanddeeplearning.com/) by Michael Nielsen. This book is more rigorous than Grokking Deep Learning and includes a lot of fun, interactive visualizations to play with.\n\n\n* [The Deep Learning Textbook](http://www.deeplearningbook.org/) from Ian Goodfellow, Yoshua Bengio, and Aaron Courville. This online book contains a lot of material and is the most rigorous of the three books suggested.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}