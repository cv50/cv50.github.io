WEBVTT
Kind: captions
Language: zh-CN

00:00:03.730 --> 00:00:06.799
现在我们已经认识到

00:00:06.799 --> 00:00:11.684
要有准确的边缘检测效果 结合使用低通和高通过滤器有多重要

00:00:11.685 --> 00:00:13.760
但就算两者结合使用

00:00:13.759 --> 00:00:17.295
边缘检测也仍是个很棘手的难题

00:00:17.295 --> 00:00:21.500
我们需要思考 什么样的强度变化会形成边缘

00:00:21.500 --> 00:00:27.429
如果边缘薄厚程度不同 我们又要怎么检测并将其表示出来呢？

00:00:27.429 --> 00:00:30.679
最好用也是最常用的边缘检测器之一

00:00:30.679 --> 00:00:35.149
叫做 canny 边缘检测器 它能解决上述两个问题

00:00:35.149 --> 00:00:40.310
canny 边缘检测器在计算机视觉领域应用十分广泛

00:00:40.310 --> 00:00:45.790
因为该检测器会借助一系列操作 不断生成精准的检测边缘

00:00:45.789 --> 00:00:49.725
首先 检测器用高斯模糊过滤掉噪声

00:00:49.725 --> 00:00:55.130
然后用 Sobel 过滤器确定图像边缘的强度和方向

00:00:55.130 --> 00:00:57.633
我们之前也进行过类似的操作

00:00:57.633 --> 00:01:00.815
接着 借助 Sobel 过滤器的输出

00:01:00.814 --> 00:01:04.069
Canny 会用非极大抑制

00:01:04.069 --> 00:01:07.668
来观察每个检测边缘的强度和方向

00:01:07.668 --> 00:01:09.679
选出局部最大像素

00:01:09.680 --> 00:01:15.500
从而把最强的边缘绘制成连续的、一个像素宽的细线

00:01:15.500 --> 00:01:21.140
最后 用滞后阀值来分离最佳边缘

00:01:21.140 --> 00:01:24.079
滞后阀值是双阀值化操作

00:01:24.079 --> 00:01:29.049
以某图一像素宽的横切面为例

00:01:29.049 --> 00:01:31.759
这里的曲线代表边缘强度

00:01:31.760 --> 00:01:34.984
峰值指的是十分强的边缘

00:01:34.984 --> 00:01:37.280
使用滞后阀值时 我们要确定

00:01:37.280 --> 00:01:41.099
一个高阀值 以便允许这些强边缘通过

00:01:41.099 --> 00:01:43.729
再设置一个低阀值

00:01:43.730 --> 00:01:48.034
任何低于该阀值的边缘即为弱边缘 会被舍弃

00:01:48.034 --> 00:01:51.710
但位于高低阀值之间的边缘

00:01:51.709 --> 00:01:57.139
只有当其与另一个强边缘相连时 才会得到保留

00:01:57.140 --> 00:02:01.430
这样一来 Canny 就删除了弱边缘 消除了噪声

00:02:01.430 --> 00:02:03.530
还将关联最强的那些边缘分离了出来

00:02:03.530 --> 00:02:06.625
而这些边缘恰恰最可能是物体边界的一部分

00:02:06.625 --> 00:02:09.784
由于 Canny 着重强调重要边缘

00:02:09.784 --> 00:02:13.490
所以它特别适合检测边界和形状

00:02:13.490 --> 00:02:16.989
实现 Canny 边缘检测的代码十分简单

00:02:16.989 --> 00:02:20.825
以这张向日葵照片为例 我将其读取出来

00:02:20.824 --> 00:02:24.889
用 cvtColor 将图片转为灰度图像

00:02:24.889 --> 00:02:28.664
然后开始实现 Canny 边缘检测

00:02:28.664 --> 00:02:33.109
要实现滞后阀值 我要定义上下限

00:02:33.110 --> 00:02:39.045
边缘检测的强度范围在 0 到 255 之间

00:02:39.044 --> 00:02:45.259
所以我将下限定为 120 上限定为下限的两倍 即 240

00:02:45.259 --> 00:02:50.284
建议将高低阀值的比例保持在 1:2 就像这样

00:02:50.284 --> 00:02:52.460
或者 1:3 这两个比例的效果最佳

00:02:52.460 --> 00:02:56.060
然后使用 OpenCV 的 Canny 函数

00:02:56.060 --> 00:02:57.860
该函数需要输入的参数有 灰度图像以及

00:02:57.860 --> 00:03:00.860
刚才定义的阀值上下限

00:03:00.860 --> 00:03:04.770
函数会返回出检测好边缘的图像 我将其命名为 edges

00:03:04.770 --> 00:03:07.245
将结果绘制出来

00:03:07.245 --> 00:03:09.950
Canny 算法自动模糊了图像

00:03:09.949 --> 00:03:13.579
但你可以进一步模糊图像 因为我们发现这里还有一些噪声

00:03:13.580 --> 00:03:16.310
但输出基本就是这样了 Canny

00:03:16.310 --> 00:03:20.099
检测出了向日葵的边缘 生成了二值图像

00:03:20.099 --> 00:03:23.058
不过我们来看能不能有更好的效果

00:03:23.058 --> 00:03:26.539
这次我要用两种不同的方法来实现 Canny

00:03:26.539 --> 00:03:30.334
一个我称为 wide (宽松) 因为其低阀值很低

00:03:30.335 --> 00:03:35.159
第二个我称为 tight (严格) 因为其可接受边缘的范围要相对小得多

00:03:35.159 --> 00:03:38.620
将两张图像并排绘制出来

00:03:38.620 --> 00:03:42.455
看到了吧 宽松图能看到很多检测边缘

00:03:42.455 --> 00:03:46.129
而因为弱边缘的筛选阀值较高 所以严格图检测出来的边缘少一些

00:03:46.128 --> 00:03:49.939
无论是哪一种 我们都可以看到 Canny 很好地检测出了向日葵的轮廓

00:03:49.939 --> 00:03:52.984
而且用细线生成了二值图像

00:03:52.985 --> 00:03:56.365
这点在严格图里更为明显

00:03:56.365 --> 00:03:58.909
如果我们想选出特定区域来进行掩膜操作或进一步分析

00:03:58.909 --> 00:04:02.060
这一方法十分实用

