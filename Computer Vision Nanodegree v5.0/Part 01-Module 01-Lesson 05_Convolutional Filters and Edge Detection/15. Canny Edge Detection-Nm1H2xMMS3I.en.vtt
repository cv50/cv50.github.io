WEBVTT
Kind: captions
Language: en

00:00:03.730 --> 00:00:06.799
Now, we've seen the importance of using

00:00:06.799 --> 00:00:11.684
both low pass and high pass filters for accurate edge detection.

00:00:11.685 --> 00:00:13.760
But even with these used together,

00:00:13.759 --> 00:00:17.295
edge detection is still a very complex problem.

00:00:17.295 --> 00:00:21.500
We have to think about what level of intensity change constitutes an edge,

00:00:21.500 --> 00:00:27.429
and how we can consistently detect and represent both thin and thick edges.

00:00:27.429 --> 00:00:30.679
One of the best and most frequently used edge detectors that

00:00:30.679 --> 00:00:35.149
takes all of these questions into account is the canny edge detector.

00:00:35.149 --> 00:00:40.310
Canny edge detection is used very widely in computer vision applications because it

00:00:40.310 --> 00:00:45.790
goes through a series of steps that consistently produce accurately detected edges.

00:00:45.789 --> 00:00:49.725
First, it filters out noise using a Gaussian blur.

00:00:49.725 --> 00:00:55.130
Second, it finds the strength and direction of edges in an image using Sobel filters,

00:00:55.130 --> 00:00:57.633
and we've gone through steps like these before.

00:00:57.633 --> 00:01:00.815
Third, using the output of the Sobel filters,

00:01:00.814 --> 00:01:04.069
Canny then applies non-maximum suppression which

00:01:04.069 --> 00:01:07.668
looks at the strength and direction of each detected edge and selects

00:01:07.668 --> 00:01:09.679
the local maximum pixel to create

00:01:09.680 --> 00:01:15.500
consistent one pixel wide thin lines that align with the strongest edges.

00:01:15.500 --> 00:01:21.140
Finally, it uses a process called hysteresis thresholding to isolate the best edges.

00:01:21.140 --> 00:01:24.079
Hysteresis is a double thresholding process.

00:01:24.079 --> 00:01:29.049
Let's see an example taking a one pixel wide cross-section of an image.

00:01:29.049 --> 00:01:31.759
Here the curve represents the level of intensity

00:01:31.760 --> 00:01:34.984
in edges where the peaks are very strong edges.

00:01:34.984 --> 00:01:37.280
To perform hysteresis, we define

00:01:37.280 --> 00:01:41.099
a high threshold that allows these strong edges to pass through.

00:01:41.099 --> 00:01:43.729
And we use a second low threshold too.

00:01:43.730 --> 00:01:48.034
Any edge below this low threshold is considered weak and discarded.

00:01:48.034 --> 00:01:51.710
But an edge whose strength falls in between this low threshold and

00:01:51.709 --> 00:01:57.139
the high threshold will be kept only when it's connected to another strong edge.

00:01:57.140 --> 00:02:01.430
This way Canny eliminates weak edges and noise and isolates the edges

00:02:01.430 --> 00:02:03.530
that are the most connected and therefore are most

00:02:03.530 --> 00:02:06.625
likely to be part of an object boundary.

00:02:06.625 --> 00:02:09.784
And because Canny emphasizes important edges,

00:02:09.784 --> 00:02:13.490
we'll see that it's very useful in boundary and shape detection.

00:02:13.490 --> 00:02:16.989
The code to implement Canny edge detection is fairly simple.

00:02:16.989 --> 00:02:20.825
Here, I've read in an image of a sunflower as an example.

00:02:20.824 --> 00:02:24.889
I'll first convert it to grayscale using CVT color.

00:02:24.889 --> 00:02:28.664
Then I'll begin to implement Canny edge detection.

00:02:28.664 --> 00:02:33.109
I'll have to define lower and upper thresholds for implementing hysteresis.

00:02:33.110 --> 00:02:39.045
The edges that are detected range in intensity values from 0 to 255.

00:02:39.044 --> 00:02:45.259
So I'll set the low threshold to 120 and the upper threshold to twice that value, 240.

00:02:45.259 --> 00:02:50.284
It's recommended to use a low to high threshold ratio between 1:2 like this,

00:02:50.284 --> 00:02:52.460
or 1:3 for best results.

00:02:52.460 --> 00:02:56.060
Then we can use OpenCVs Canny function.

00:02:56.060 --> 00:02:57.860
This takes in our grayscale image and

00:02:57.860 --> 00:03:00.860
our lower and upper thresholds that we just defined.

00:03:00.860 --> 00:03:04.770
And it returns an edge detected image which I'm calling edges.

00:03:04.770 --> 00:03:07.245
Then I'll plot the result.

00:03:07.245 --> 00:03:09.950
The Canny algorithm blurs our image automatically,

00:03:09.949 --> 00:03:13.579
but you can choose to blur it even more since we're picking up some noise here.

00:03:13.580 --> 00:03:16.310
But you can see the basic output: Canny

00:03:16.310 --> 00:03:20.099
detects the edges of the flower and produces a binary image.

00:03:20.099 --> 00:03:23.058
But let's see if we can get even better performance.

00:03:23.058 --> 00:03:26.539
This time, I'll try two different Canny implementations.

00:03:26.539 --> 00:03:30.334
One, I'll call a wide because it has a very low lower threshold.

00:03:30.335 --> 00:03:35.159
And the other I called tight which has a much narrower range for acceptable edges.

00:03:35.159 --> 00:03:38.620
And I'll display these two images side by side.

00:03:38.620 --> 00:03:42.455
Here they are. The wide image shows a lot of detected edges,

00:03:42.455 --> 00:03:46.129
and the tight shows fewer since the cutoff for weak edges is higher.

00:03:46.128 --> 00:03:49.939
In both cases, we can see that Canny detects boundaries quite well,

00:03:49.939 --> 00:03:52.984
and produces a binary image within the lines.

00:03:52.985 --> 00:03:56.365
We can especially see that in this tight version.

00:03:56.365 --> 00:03:58.909
This becomes very useful when we want to select

00:03:58.909 --> 00:04:02.060
a certain area of interest to mask or further analyze.

