WEBVTT
Kind: captions
Language: zh-CN

00:00:03.520 --> 00:00:09.224
说到图像噪声 之前那张旧金山市政大厅图就有所涉及

00:00:09.224 --> 00:00:12.469
噪声通常就是图像的斑点或变色部分

00:00:12.470 --> 00:00:16.195
不含任何有用信息

00:00:16.195 --> 00:00:19.370
甚至会影响处理操作

00:00:19.370 --> 00:00:24.199
比如在边缘检测时 如果没有先解决噪声 高通过滤器就会把噪声强化

00:00:24.199 --> 00:00:29.210
低通过滤器是噪声最常见的解决方式

00:00:29.210 --> 00:00:32.329
这类过滤器能阻挡特定高频部分

00:00:32.329 --> 00:00:35.839
有效模糊图像或使图像平滑起来

00:00:35.840 --> 00:00:38.750
从而减少高频噪声

00:00:38.750 --> 00:00:43.189
这种过滤器的实用性在医学影像里淋漓尽致地体现了出来

00:00:43.189 --> 00:00:49.000
这类图像通常都会因为影像设备或人体移动而产生噪声

00:00:49.000 --> 00:00:53.155
我们来仔细讲讲这张人脑横断面图

00:00:53.155 --> 00:00:56.179
我们可以明显看到头骨和大脑的轮廓

00:00:56.179 --> 00:00:59.448
但也可以看到很多盐粒或胡椒粒似的斑点

00:00:59.448 --> 00:01:02.000
这就是高频噪声

00:01:02.000 --> 00:01:06.605
你可以想象一下 如果我们用高通滤波镜来检测边缘

00:01:06.605 --> 00:01:10.814
不仅会检测到许多噪声 还会强化它们

00:01:10.814 --> 00:01:15.530
要降噪 我们可以取相邻像素的均值

00:01:15.530 --> 00:01:20.448
从而避免强度突变 特别是小范围突变

00:01:20.448 --> 00:01:23.149
而这种取空间像素均值的做法

00:01:23.150 --> 00:01:27.560
同应用低通过滤器来过滤高频噪声是一样的

00:01:27.560 --> 00:01:31.060
我们来看一个例子 用普通核来降噪

00:01:31.060 --> 00:01:33.920
第一个也是最简单的一个 均值过滤器

00:01:33.920 --> 00:01:36.195
这是个三乘三的核

00:01:36.194 --> 00:01:39.419
核会赋予中心像素及其相邻像素一样的权重

00:01:39.420 --> 00:01:44.325
低通过滤器通常会取均值 不像高通过滤器取的是差值

00:01:44.325 --> 00:01:47.125
因此低通过滤器的元素加起来应该为 1

00:01:47.125 --> 00:01:49.280
这就能保留图像的亮度

00:01:49.280 --> 00:01:52.155
确保图像不会变亮或变暗

00:01:52.155 --> 00:01:55.590
但我们可以看到 这个核的元素加起来等于 9

00:01:55.590 --> 00:02:00.195
所以我们需要进行归一化处理 也就是将核值总和除以 9

00:02:00.194 --> 00:02:03.169
于是最终结果就等于 1 了

00:02:03.170 --> 00:02:07.189
现在回到医学影像上来 观察图像 F (x , y) 和这个核 K

00:02:07.189 --> 00:02:12.620
的卷积情况 这里放大了图像的某一部分

00:02:12.620 --> 00:02:14.390
为了进行卷积

00:02:14.389 --> 00:02:17.824
我们需要把这个三乘三的核分别放到图像的每个像素上

00:02:17.824 --> 00:02:21.734
我选这个值为 40 的黑像素作为中心像素

00:02:21.735 --> 00:02:24.740
观察三乘三方块里的所有值

00:02:24.740 --> 00:02:27.860
将核里的权重

00:02:27.860 --> 00:02:31.310
与相应的像素两两相乘

00:02:31.310 --> 00:02:36.129
因此 我们将所有值分别乘以 1 然后相加

00:02:36.129 --> 00:02:39.514
最后将总和除以 9 将图像归一化

00:02:39.514 --> 00:02:43.759
从而得到要输出的像素值 85

00:02:43.759 --> 00:02:45.739
我们可以发现 这就是中心像素

00:02:45.740 --> 00:02:48.780
与其相邻像素的均值

00:02:48.780 --> 00:02:52.324
由于相邻像素大多比中心像素亮

00:02:52.324 --> 00:02:55.489
所以新输出的像素值也会更亮

00:02:55.490 --> 00:02:58.585
如果对整张图像的所有像素进行同样的均值处理

00:02:58.585 --> 00:03:04.010
我们就能使图像变得平滑 图像里的强度突变也会变少

00:03:04.009 --> 00:03:06.870
这有利于减少噪声

00:03:06.870 --> 00:03:11.175
或使处于一定强度范围的背景区域看起来更加平滑

00:03:11.175 --> 00:03:13.560
实际上 这类过滤器在 Photoshop 里也有应用

00:03:13.560 --> 00:03:16.789
可对图像的某一部分进行柔化或模糊处理

00:03:16.789 --> 00:03:19.000
接下来我们来讲怎么编写代码

