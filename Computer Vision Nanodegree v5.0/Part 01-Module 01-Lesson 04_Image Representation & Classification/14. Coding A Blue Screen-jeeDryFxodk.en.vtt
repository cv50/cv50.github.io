WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.810
Let's code up a simple blue screen color selection in Python.

00:00:03.810 --> 00:00:07.617
We'll be using a new library in this lesson called OpenCV,

00:00:07.617 --> 00:00:09.240
which is commonly used in

00:00:09.240 --> 00:00:13.940
computer vision applications and will help us create custom applications of our own.

00:00:13.939 --> 00:00:17.535
We'll be starting with an image of a pizza on a blue screen background.

00:00:17.535 --> 00:00:19.495
We'll first have to identify this blue region,

00:00:19.495 --> 00:00:23.420
then later we'll replace it with a background image of our choosing.

00:00:23.420 --> 00:00:26.490
Here's our Python notebook and my first step is to

00:00:26.489 --> 00:00:30.254
import the libraries I need and we'll use these throughout this lesson.

00:00:30.254 --> 00:00:35.310
For plotting I'll import pyplot from matplotlib and for operating on

00:00:35.310 --> 00:00:41.219
an image I'll use numpy and the computer vision library OpenCV which is named cv2.

00:00:41.219 --> 00:00:46.570
Next, I'll read in the image of the pizza using cv2.imread.

00:00:46.570 --> 00:00:49.109
The image is named pizza_ bluescreen.jpg

00:00:49.109 --> 00:00:54.109
and it's in the same directory as this notebook in a folder named "images".

00:00:54.109 --> 00:00:57.899
Once it's read in, you may want to print out some information about the image.

00:00:57.899 --> 00:01:01.784
This is often helpful to see before starting to manipulate any image.

00:01:01.784 --> 00:01:06.352
So I'll print out what type of data it is and I expect it to be a 2D array,

00:01:06.352 --> 00:01:09.584
also known as a grid or matrix of pixel values.

00:01:09.584 --> 00:01:14.179
And I'll also print its shape which will tell us the dimensions of the image.

00:01:14.180 --> 00:01:17.925
Then let's run this and we see the expected output.

00:01:17.924 --> 00:01:20.640
The image is indeed an array and its shape contains

00:01:20.640 --> 00:01:24.200
three values that represent the dimensions of the image array.

00:01:24.200 --> 00:01:26.742
First its height 514 pixels,

00:01:26.742 --> 00:01:28.808
then its width 816,

00:01:28.808 --> 00:01:32.459
and finally how many color components it has: in this case three,

00:01:32.459 --> 00:01:35.869
for red, green and blue values.

00:01:35.870 --> 00:01:38.745
Next I'll display this image using pyplot.

00:01:38.745 --> 00:01:40.915
But we can see that the image looks weird,

00:01:40.915 --> 00:01:44.095
that the background is red and not blue like we expect.

00:01:44.094 --> 00:01:45.700
So what's happening here?

00:01:45.700 --> 00:01:50.189
Well, OpenCV reads in color images as BGR (blue,

00:01:50.189 --> 00:01:52.965
green, red) images and not RGB.

00:01:52.965 --> 00:01:57.945
So the red and blue colors are in reverse order and pyplot reflects this switch.

00:01:57.944 --> 00:02:01.579
You can learn more about why OpenCV does this in text.

00:02:01.579 --> 00:02:04.739
But for this and many other examples I'll often change

00:02:04.739 --> 00:02:09.224
images from BGR to RGB because they'll will be easier to display.

00:02:09.224 --> 00:02:11.849
So before we display the image let's make a copy of

00:02:11.849 --> 00:02:17.079
the original image and use OpenCV to change the color from BGR to RGB.

00:02:17.080 --> 00:02:20.955
It's good practice to always make a copy of the image you're working with.

00:02:20.955 --> 00:02:26.087
This way any transformation you'll apply to the copy will not affect the original image,

00:02:26.086 --> 00:02:28.754
so it's easier to undo a step or try something new.

00:02:28.754 --> 00:02:31.634
And I'll name this copy image_copy.

00:02:31.634 --> 00:02:33.659
Then on this copy we can perform

00:02:33.659 --> 00:02:38.520
a color transformation using the OpenCV function cvtColor.

00:02:38.520 --> 00:02:40.080
This takes in a source image and

00:02:40.080 --> 00:02:44.414
color conversion code which in this case is just BGR to RGB,

00:02:44.413 --> 00:02:47.129
and then outputs the desired image.

00:02:47.129 --> 00:02:52.074
Then if we plot this image copy we see the blue screen background as expected.

00:02:52.074 --> 00:02:53.519
I went through this image reading,

00:02:53.520 --> 00:02:56.505
copying and displaying code fairly slowly this time,

00:02:56.504 --> 00:02:58.370
because we'll be using it regularly.

00:02:58.370 --> 00:03:02.219
But now let's jump into the blue screen color threshold code.

00:03:02.219 --> 00:03:04.264
To create a color threshold,

00:03:04.264 --> 00:03:09.024
I'll first define lower and upper bounds for the color I want to isolate - blue.

00:03:09.025 --> 00:03:11.370
I want to use these values to eventually select

00:03:11.370 --> 00:03:15.814
the blue screen area that contains this range of color values and get rid of it.

00:03:15.814 --> 00:03:20.039
So I'll define a lower threshold that contains the lowest values of red,

00:03:20.039 --> 00:03:24.254
green and blue that are still considered part of the blue screen background.

00:03:24.254 --> 00:03:26.715
This will be an array of three values.

00:03:26.715 --> 00:03:33.060
For red and green, I'll set this as 0 meaning it's okay to have no red or green.

00:03:33.060 --> 00:03:36.210
But the lowest value for blue should still be quite high.

00:03:36.210 --> 00:03:37.965
Now all the way up to 255,

00:03:37.965 --> 00:03:40.085
but let's say around 230.

00:03:40.085 --> 00:03:42.870
Similarly, I'll define the upper threshold.

00:03:42.870 --> 00:03:45.314
I'll define it to allow a little more red and green,

00:03:45.314 --> 00:03:50.409
say 50 each, and I'll set the highest value for blue to be 255.

00:03:50.409 --> 00:03:54.719
Any color within this low and high range will be an intense blue color.

00:03:54.719 --> 00:03:57.120
I'm doing some estimation though so if I find that

00:03:57.120 --> 00:03:59.955
this range isn't finding the blue screen area that I want,

00:03:59.955 --> 00:04:01.859
I'll come back and change these values.

00:04:01.859 --> 00:04:06.865
Next, I'll use the color bounds I just created to create an image mask.

00:04:06.865 --> 00:04:09.360
Masks are a very common way to isolate

00:04:09.360 --> 00:04:12.975
a selected area of interest and do something with that area.

00:04:12.974 --> 00:04:19.254
We can create a mask over the blue area using OpenCVs in inRange function.

00:04:19.254 --> 00:04:21.029
This function takes in an image in

00:04:21.029 --> 00:04:24.809
our lower and upper color bounds and defines a mask by asking if

00:04:24.810 --> 00:04:27.555
the color value of each image pixel falls

00:04:27.555 --> 00:04:31.300
in the range of the lower and upper color thresholds.

00:04:31.300 --> 00:04:32.985
If it does fall in this range,

00:04:32.985 --> 00:04:35.420
the mask will allow it to be displayed and

00:04:35.420 --> 00:04:38.814
if not it will block it out and turn the pixel back.

00:04:38.814 --> 00:04:43.589
In fact, we can visualize the mask by plotting it as we would an image.

00:04:43.589 --> 00:04:45.989
This white area is where the image will be allowed to

00:04:45.990 --> 00:04:48.930
show through and the black will be blocked out.

00:04:48.930 --> 00:04:51.629
In numerical values, we can look at this mask as

00:04:51.629 --> 00:04:54.949
a 2D grid with the same dimensions as our image;

00:04:54.949 --> 00:04:58.485
514 pixels in height and 816 in width.

00:04:58.485 --> 00:05:05.302
And each coordinate in this mask has a value of either 255 for white or 0 for black,

00:05:05.302 --> 00:05:07.540
sort of like a grayscale image.

00:05:07.540 --> 00:05:11.129
And when we look at this mask we can see that it has a white area where

00:05:11.129 --> 00:05:15.300
the blue screen background is and a black area where the pizza is.

00:05:15.300 --> 00:05:17.520
And the first thing we want to do is let

00:05:17.519 --> 00:05:20.935
the pizza show through and block the blue screen background.

00:05:20.935 --> 00:05:24.089
First, to mask the image I'll make another image copy

00:05:24.089 --> 00:05:27.449
called masked image of our color changed image copy,

00:05:27.449 --> 00:05:30.189
just in case I want to change the mask later on.

00:05:30.189 --> 00:05:35.160
Then one way to select the blue screen area is by asking for the part of

00:05:35.160 --> 00:05:40.905
that image that overlaps with the part of the mask that is white or not black.

00:05:40.904 --> 00:05:43.139
That is, we'll select the part of the image where

00:05:43.139 --> 00:05:45.838
the area of the mask is not equal to zero,

00:05:45.838 --> 00:05:49.134
using this exclamation point equals boolean operator,

00:05:49.134 --> 00:05:51.779
where the exclamation point means not.

00:05:51.779 --> 00:05:56.294
And to block this background area out we then set these pixels to black.

00:05:56.295 --> 00:06:00.765
In RGB black is just zeros for all three color values.

00:06:00.764 --> 00:06:03.449
Then when we display our image we should see that

00:06:03.449 --> 00:06:06.464
the pizza area is the only area that shows through;

00:06:06.464 --> 00:06:09.060
the blue screen background is gone.

00:06:09.060 --> 00:06:13.495
I might even change my color thresholds to get rid of these last few spots.

00:06:13.495 --> 00:06:20.370
I'll try increasing my highest green value to 70 and decreasing my low blue value to 220.

00:06:20.370 --> 00:06:22.629
This should capture a larger range of blue.

00:06:22.629 --> 00:06:26.029
Then I'll run the masking and displaying code again.

00:06:26.029 --> 00:06:28.229
And this image looks even better.

00:06:28.230 --> 00:06:32.790
Now we just have one last step which is to apply a background to this image.

00:06:32.790 --> 00:06:37.050
The process will be fairly similar so I'll go through these steps fairly quickly.

00:06:37.050 --> 00:06:41.530
First, I'll read in an image of outer space and convert it to RGB color.

00:06:41.529 --> 00:06:45.329
I'll also crop it so that it's the same size as our pizza image;

00:06:45.329 --> 00:06:47.818
514 by 816 pixels.

00:06:47.819 --> 00:06:50.845
I'm calling this image crop_background.

00:06:50.845 --> 00:06:52.485
Then I'll apply the mask,

00:06:52.485 --> 00:06:54.855
this time using the opposite mask,

00:06:54.855 --> 00:06:58.730
meaning I want the background to show through and not the Pizza area.

00:06:58.730 --> 00:07:02.040
If we look back at the mask in this case I'm blocking

00:07:02.040 --> 00:07:06.050
the part of the background image where the mask is equal to zero.

00:07:06.050 --> 00:07:09.824
And for this we say mask == 0.

00:07:09.824 --> 00:07:12.164
Just to make sure I got this masking correct,

00:07:12.165 --> 00:07:17.265
I'll plot the resulting image and I get the background with the pizza cut out.

00:07:17.264 --> 00:07:20.818
Then finally I just need to add these two images together.

00:07:20.819 --> 00:07:25.139
Since the black area is equivalent to zeros in pixel color value,

00:07:25.139 --> 00:07:27.264
a simple addition will work.

00:07:27.264 --> 00:07:33.419
And when I plot the complete image I get a pizza floating in space. And that's it.

00:07:33.420 --> 00:07:36.925
In text you'll find notes on the functions we use to get here.

00:07:36.925 --> 00:07:41.000
And next you'll get some hands on practice coding your own color threshold.

