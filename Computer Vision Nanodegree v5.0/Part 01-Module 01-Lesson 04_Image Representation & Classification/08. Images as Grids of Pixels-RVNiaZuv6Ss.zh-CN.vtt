WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.009
第一个任务是对一组二元数据进行分类

00:00:05.009 --> 00:00:07.664
即白天或晚上拍摄的照片

00:00:07.665 --> 00:00:09.730
在完成此任务之前

00:00:09.730 --> 00:00:13.695
首先需要学习计算机是如何查看图像的

00:00:13.695 --> 00:00:15.570
我们来看看这个汽车图像

00:00:15.570 --> 00:00:18.120
实际上是一个在路上行驶的无人驾驶汽车

00:00:18.120 --> 00:00:20.670
看看计算机是如何理解该图像的

00:00:20.670 --> 00:00:23.429
我们首先将处理像这样的黑白图像

00:00:23.429 --> 00:00:26.233
因为颜色会额外带来复杂性

00:00:26.234 --> 00:00:29.550
但是遵守相同的一般原则 稍后我们就会发现

00:00:29.550 --> 00:00:31.289
当我向你展示这个图像时

00:00:31.289 --> 00:00:33.719
你可能会说“噢 是一张汽车照片”

00:00:33.719 --> 00:00:37.338
没错 并且还是二维网格值

00:00:37.338 --> 00:00:40.699
亦称之为具有宽度和高度的数组

00:00:40.700 --> 00:00:42.455
我来解释下

00:00:42.454 --> 00:00:44.629
这种图和所有数字图像

00:00:44.630 --> 00:00:46.429
都由像素网格组成

00:00:46.429 --> 00:00:49.759
即单个颜色强度的很小单位

00:00:49.759 --> 00:00:54.079
如果我们放大车轮的这个区域

00:00:54.079 --> 00:00:56.375
可以更清晰地看到这些像素

00:00:56.375 --> 00:00:59.450
现在可以看出像一个网格

00:00:59.450 --> 00:01:01.520
这个网格中的每个像素颜色

00:01:01.520 --> 00:01:04.015
都有一个对应的数值

00:01:04.015 --> 00:01:06.140
对于这样的灰度图像

00:01:06.140 --> 00:01:09.920
每个像素的值范围是从 0 到 255

00:01:09.920 --> 00:01:12.439
0 表示黑色 255 表示白色

00:01:12.439 --> 00:01:14.304
所有中间值表示灰色

00:01:14.305 --> 00:01:17.630
因此 120 左右的值表示

00:01:17.629 --> 00:01:19.159
介于黑色和白色之间的中灰色

00:01:19.159 --> 00:01:20.869
20 左右的值

00:01:20.870 --> 00:01:23.439
表示非常非常暗的灰色 接近黑色

00:01:23.439 --> 00:01:24.980
每个像素

00:01:24.980 --> 00:01:26.870
除了具有颜色值之外

00:01:26.870 --> 00:01:30.094
在这个图像网格中还具有位置 (x,y)

00:01:30.094 --> 00:01:32.944
这些坐标轴和图形中的坐标轴很像

00:01:32.944 --> 00:01:34.429
但是对于数字图像来说

00:01:34.430 --> 00:01:39.870
左上角的坐标是原点 即 x=0 y=0 的点

00:01:39.870 --> 00:01:45.255
这个汽车图像的高为 427 像素 宽为 640 像素

00:01:45.254 --> 00:01:49.019
像素位置位于从索引 0 开始的网格上

00:01:49.019 --> 00:01:51.780
列从 0 到 369

00:01:51.780 --> 00:01:54.165
行从 0 到 426

00:01:54.165 --> 00:01:59.955
例如 在 x = 190 y = 375 的位置

00:01:59.954 --> 00:02:03.314
是图像左下角车轮上的一个像素

00:02:03.314 --> 00:02:05.609
像素值为 28

00:02:05.609 --> 00:02:07.109
表示深灰色

00:02:07.109 --> 00:02:09.000
你可能会疑问 我是如何知道的

00:02:09.000 --> 00:02:13.139
在代码中 我们可以通过位置知道任何一个像素值

00:02:13.139 --> 00:02:16.864
我们来试一下 我们将读取这个汽车图像

00:02:16.865 --> 00:02:19.295
首先 我将导入所需的库

00:02:19.294 --> 00:02:23.794
包括 matplotlib.image 该库使我们能够读取任何图像

00:02:23.794 --> 00:02:25.684
还导入了 cv2

00:02:25.685 --> 00:02:29.224
它是一个计算机视觉库 稍后你将深入学习该库

00:02:29.224 --> 00:02:31.859
我还将使用 matplotlib qt

00:02:31.860 --> 00:02:36.350
当我显示图像时 qt 使图像能够在交互式窗口中弹出

00:02:36.349 --> 00:02:38.709
我将使用 matplotlib 的 imread 函数

00:02:38.709 --> 00:02:41.319
读取汽车图像

00:02:41.319 --> 00:02:44.014
传入图像文件的名称

00:02:44.014 --> 00:02:48.829
这个汽车图像位于 images 目录中 和这个 notebook 的位置一样

00:02:48.830 --> 00:02:52.785
接着我将输出关于该图像的一些信息

00:02:52.784 --> 00:02:57.060
我将通过引用 image.shape 输出图像大小

00:02:57.060 --> 00:03:00.224
现在可以看到以像素为单位的高度和宽度了

00:03:00.224 --> 00:03:02.120
并且看到了另一个值 3

00:03:02.120 --> 00:03:05.550
对应的是这个图像的颜色通道数量

00:03:05.550 --> 00:03:07.860
稍后我们将详细了解这个值

00:03:07.860 --> 00:03:10.635
暂时将该图像转换为灰度图像

00:03:10.634 --> 00:03:14.280
为此 我们将使用计算机视觉库

00:03:14.280 --> 00:03:17.669
暂时只需记住该库具有内置的颜色转换代码

00:03:17.669 --> 00:03:21.405
例如将图像从红绿蓝颜色转换为灰度图像

00:03:21.405 --> 00:03:24.180
然后显示这个灰度图像

00:03:24.180 --> 00:03:26.564
这样就打开了交互式窗口

00:03:26.564 --> 00:03:29.020
当我在这个图像中移动光标时

00:03:29.020 --> 00:03:33.085
可以看到屏幕左下角显示了 x y 的位置

00:03:33.085 --> 00:03:35.585
以及对应的像素值

00:03:35.585 --> 00:03:36.930
在下面的车轮部分

00:03:36.930 --> 00:03:40.215
显示了在 28 和 29 左右的深色像素值

00:03:40.215 --> 00:03:42.969
天空部分对应的是一些浅色像素值

00:03:42.969 --> 00:03:45.425
可以看到 220 左右或甚至更高的像素值

00:03:45.425 --> 00:03:47.255
回到 notebook

00:03:47.254 --> 00:03:51.338
可以通过位置访问单个像素并输出像素值

00:03:51.338 --> 00:03:55.579
假设 say x = 190 y = 375

00:03:55.580 --> 00:04:01.890
我可以通过在灰度图像中查看该位置访问该像素值 即 (y,x)

00:04:01.889 --> 00:04:06.794
最后 我将输出该值 可以看出是 28

00:04:06.794 --> 00:04:10.394
图像中的每个像素都是一个数值

00:04:10.395 --> 00:04:13.034
我们还可以更改这些像素值

00:04:13.034 --> 00:04:17.279
我们可以通过使每个像素乘以一个标量 更改图像的亮度

00:04:17.279 --> 00:04:21.944
我们可以将每个像素向右或向左移动 还可以执行更多其他操作

00:04:21.944 --> 00:04:27.180
将图像当做数字网格是很多图像处理技术的基础

00:04:27.180 --> 00:04:32.040
很多颜色和形状转换就是通过对图像进行数学处理

00:04:32.040 --> 00:04:34.520
并逐个更改像素实现的

