WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.754
One of the most difficult parts of building networks for me is getting the batches right.

00:00:04.754 --> 00:00:09.088
It's more of a programming challenge than anything deep learning specific.

00:00:09.089 --> 00:00:13.964
So here, I'm going to walk you through how batching works for RNNs.

00:00:13.964 --> 00:00:17.975
With RNNs, we're training on sequences of data like text,

00:00:17.975 --> 00:00:20.625
stack values, audio, etc.

00:00:20.625 --> 00:00:24.609
By taking a sequence and splitting it into multiple shorter sequences,

00:00:24.609 --> 00:00:28.655
we can take advantage of matrix operations to make training more efficient.

00:00:28.655 --> 00:00:33.730
In fact, the RNN is training on multiple sequences in parallel.

00:00:33.729 --> 00:00:35.799
Let's look at a simple example.

00:00:35.799 --> 00:00:38.289
A sequence of numbers from one to 12.

00:00:38.289 --> 00:00:41.539
We can pass these into an RNN as one sequence.

00:00:41.539 --> 00:00:46.265
But what's better, we could split it in half and pass in two sequences.

00:00:46.265 --> 00:00:50.230
The batch size corresponds to the number of sequences we're using.

00:00:50.229 --> 00:00:52.959
So here we'd say the batch size is two.

00:00:52.960 --> 00:00:54.335
Along with the batch size,

00:00:54.335 --> 00:00:57.480
we also choose the length of the sequences we feed to the network.

00:00:57.479 --> 00:01:00.924
For example, let's consider using a sequence length of three.

00:01:00.924 --> 00:01:03.744
Then the first batch of data we pass into the network

00:01:03.744 --> 00:01:06.769
are the first three values in each mini-sequence.

00:01:06.769 --> 00:01:09.484
The next batch contains the next three values,

00:01:09.484 --> 00:01:11.495
and so on until we run out of data.

00:01:11.495 --> 00:01:16.359
We can retain the hidden state from one batch and use it at the start of the next batch.

00:01:16.359 --> 00:01:21.539
This way the sequence information is transferred across batches for each mini-sequence.

00:01:21.540 --> 00:01:27.200
Next up, you'll see how to actually build a recurrent network. Cheers!

