WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.185
我们了解了很多线性图形 SLAM 知识 知识点很多

00:00:03.185 --> 00:00:04.740
其实非常简单

00:00:04.740 --> 00:00:06.290
每次有约束条件

00:00:06.290 --> 00:00:09.015
初始位置 运动或测量项

00:00:09.015 --> 00:00:13.054
我们用此约束条件使 Ω 和 ξ 与某项相加

00:00:13.054 --> 00:00:17.339
我们相加的是约束条件本身

00:00:17.339 --> 00:00:19.934
但是乘以强度因子

00:00:19.934 --> 00:00:22.500
即 1/σ

00:00:22.500 --> 00:00:25.254
表示运动或测量的不确定性

00:00:25.254 --> 00:00:27.109
相加完毕后

00:00:27.109 --> 00:00:30.119
计算这个方程

00:00:30.120 --> 00:00:35.105
得出最佳潜在路径以及所有地标的地图

00:00:35.104 --> 00:00:36.734
是不是很神奇？

00:00:36.734 --> 00:00:38.594
很酷？

00:00:38.594 --> 00:00:44.100
现在深入研究并请你编写你自己的机器人示例

00:00:44.100 --> 00:00:48.355
这是刚刚看到的代码的更复杂泛化形式

00:00:48.354 --> 00:00:52.729
我为你提供了一个环境 你可以在其中指定存在的地标数量

00:00:52.729 --> 00:00:54.959
你希望这个世界运行的时间步数量

00:00:54.960 --> 00:00:58.100
世界大小 测量范围

00:00:58.100 --> 00:01:00.469
即机器人能够看到地标的范围

00:01:00.469 --> 00:01:03.644
再远就看不见了

00:01:03.645 --> 00:01:05.984
运动噪点和测量噪点

00:01:05.984 --> 00:01:07.549
以及距离参数

00:01:07.549 --> 00:01:11.319
距离指定了机器人在每一步的移动速度

00:01:11.319 --> 00:01:15.194
我提供了创建数据的例行程序

00:01:15.194 --> 00:01:19.444
它接受所有这些参数并输出一个数据字段

00:01:19.444 --> 00:01:24.184
其中包含运动序列和测量序列

00:01:24.185 --> 00:01:28.075
代码注释说明了数据的确切格式

00:01:28.075 --> 00:01:31.609
现在请你编写函数 slam

00:01:31.609 --> 00:01:36.185
输入是该数据以及各种重要参数

00:01:36.185 --> 00:01:38.015
然后输出结果 即估计姿势

00:01:38.015 --> 00:01:42.784
机器人路径和估计地标位置序列

00:01:42.784 --> 00:01:45.280
这道编程题很难

00:01:45.280 --> 00:01:47.564
基于我刚刚讲解的数学知识

00:01:47.564 --> 00:01:50.254
机器人坐标是 x 和 y 坐标

00:01:50.254 --> 00:01:52.859
测量值是 x 和 y 的差别

00:01:52.859 --> 00:01:55.739
你需要重复 x 和 y 项

00:01:55.739 --> 00:01:59.155
我自己将它们放入了一个大的矩阵中

00:01:59.155 --> 00:02:01.704
但是你也可以放入两个分开的矩阵中

00:02:01.704 --> 00:02:04.649
你需要运用到目前为止所学的所有知识

00:02:04.650 --> 00:02:07.040
包括权重 测量噪点

00:02:07.040 --> 00:02:08.935
以及运动噪点

00:02:08.935 --> 00:02:11.909
在此练习中 这两个相等 但是也可能不同

00:02:11.909 --> 00:02:18.189
你需要运行 slam 并将生成的数据结构返回给我

00:02:18.189 --> 00:02:21.069
我还提供了 print_result 例行程序

00:02:21.069 --> 00:02:24.310
你可以进去看看结果是怎样的

00:02:24.310 --> 00:02:29.250
有一个不可行的示例例行程序 它输出了所有正确格式

00:02:29.250 --> 00:02:33.094
但是没有实现这些估计项

00:02:33.094 --> 00:02:38.085
你需要实现这一部分并使其变成精彩的 SLAM 例行程序

00:02:38.085 --> 00:02:41.469
以便在运行时 获得和我一样的结果

00:02:41.469 --> 00:02:43.284
例如这些值

00:02:43.284 --> 00:02:45.349
有估计路径

00:02:45.349 --> 00:02:47.625
估计地标位置

00:02:47.625 --> 00:02:50.439
最后需要注意的是

00:02:50.439 --> 00:02:54.430
我假定初始机器人位置是这个世界的中心

00:02:54.430 --> 00:02:58.400
如果世界大小为 100 则是 50-50

00:02:58.400 --> 00:03:00.879
这里输出为 49.999

00:03:00.879 --> 00:03:02.120
和 50 是一样的

00:03:02.120 --> 00:03:04.870
你需要添加一个约束条件

00:03:04.870 --> 00:03:09.000
使初始机器人姿势为这个世界的中心

