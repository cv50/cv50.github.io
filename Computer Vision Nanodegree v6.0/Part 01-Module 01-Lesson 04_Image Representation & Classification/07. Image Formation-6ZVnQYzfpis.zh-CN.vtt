WEBVTT
Kind: captions
Language: zh-CN

00:00:00.540 --> 00:00:04.735
那计算机实际上是怎么 “看” 图像数据的呢？

00:00:04.735 --> 00:00:08.734
图像只是三维现实场景的二维表示

00:00:08.734 --> 00:00:14.064
比如 我们知道苹果是三维物体 如果你给苹果拍张照片

00:00:14.064 --> 00:00:17.379
你就得到了表示这个苹果的二维图像

00:00:17.379 --> 00:00:20.765
这张图像包含的信息有 苹果的颜色、形状、

00:00:20.765 --> 00:00:23.545
随照明条件不同而不同的阴影

00:00:23.545 --> 00:00:25.570
以及表观大小

00:00:25.570 --> 00:00:28.600
表观大小会随摄影距离的远近而不同

00:00:28.600 --> 00:00:33.004
比如 苹果离相机越近 看起来就越大

00:00:33.003 --> 00:00:35.679
相机成像

00:00:35.679 --> 00:00:38.350
与人眼成像的原理类似

00:00:38.350 --> 00:00:42.219
也即将现实物体反射的光线聚集在一起

00:00:42.219 --> 00:00:47.274
我们来看个例子 这是个照相机简易模型 叫做小孔成像模型

00:00:47.274 --> 00:00:49.464
通过一个小孔

00:00:49.465 --> 00:00:53.230
照相机将苹果反射的光线聚焦起来

00:00:53.229 --> 00:00:57.964
在后方传感器或胶卷放置之处形成一个二维图像

00:00:57.965 --> 00:01:00.580
事实上 这里形成的图像会上下颠倒、左右调转

00:01:00.579 --> 00:01:03.429
因为物体顶部发出的光线

00:01:03.429 --> 00:01:06.129
会不断沿着某一倾斜路径穿过小孔

00:01:06.129 --> 00:01:10.060
直到抵达所成图像的底部

00:01:10.060 --> 00:01:12.640
相似的 物体右侧反射出的光线

00:01:12.640 --> 00:01:16.099
会抵达所成图像的左侧

00:01:16.099 --> 00:01:19.299
数码相机会把这样的图像记录下来 然后将其翻转

00:01:19.299 --> 00:01:23.284
还我们一张正常的二维苹果图 其它物体也是一个道理

00:01:23.284 --> 00:01:26.129
这是计算机 “看” 图的第一步

00:01:26.129 --> 00:01:28.959
接下来 我们要学习怎么把数字图像打散

00:01:28.959 --> 00:01:32.984
使之成为一个由色彩和强度小单元组成的网格 这些单元就称为像素

00:01:32.984 --> 00:01:38.000
在我们编写程序来处理并判读图像的过程中 这个网格至关重要

