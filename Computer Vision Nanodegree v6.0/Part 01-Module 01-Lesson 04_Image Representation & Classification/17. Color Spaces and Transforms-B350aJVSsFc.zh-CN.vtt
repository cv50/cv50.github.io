WEBVTT
Kind: captions
Language: zh-CN

00:00:03.299 --> 00:00:07.509
我们已经知道要怎么检测蓝幕背景了

00:00:07.509 --> 00:00:10.240
但这种检测方法是有前提的

00:00:10.240 --> 00:00:13.815
那就是场景光线要好 而且蓝幕的颜色得十分连贯

00:00:13.814 --> 00:00:16.359
如果光线发生了变化

00:00:16.359 --> 00:00:19.509
墙壁有阴影、很斑驳或太亮了怎么办？

00:00:19.510 --> 00:00:24.005
这时简单的蓝色阀值就不适用了

00:00:24.004 --> 00:00:28.739
那我们要如何完整地检测出处于不同光线下的物体呢？

00:00:28.739 --> 00:00:31.239
其实 表示图像颜色的方法还有很多

00:00:31.239 --> 00:00:34.119
不仅仅有红绿蓝

00:00:34.119 --> 00:00:35.934
这种颜色分量

00:00:35.935 --> 00:00:40.329
通常我们把各种各样的颜色表示法称为 “颜色空间”

00:00:40.329 --> 00:00:44.335
RGB 是红、绿、蓝颜色空间

00:00:44.335 --> 00:00:46.645
你可以将其想象成一个三维空间

00:00:46.645 --> 00:00:50.280
其中 任意颜色都可以由

00:00:50.280 --> 00:00:52.300
R、G 和 B 的三维坐标来表示

00:00:52.299 --> 00:00:55.629
比如 白色就在这个角落里

00:00:55.630 --> 00:01:00.995
其红绿蓝三个值分别为 255、255 和 255

00:01:00.994 --> 00:01:05.579
还有一种颜色空间是 HSV 三个字母分别代表色相、饱和度和明度

00:01:05.579 --> 00:01:09.289
而 HLS 则是指色相、亮度和饱和度模型

00:01:09.290 --> 00:01:13.915
这些就是图像处理中最常用的几种颜色空间了

00:01:13.915 --> 00:01:18.765
接下来我们要讲一个在 HSV 颜色空间中进行图像处理的例子

00:01:18.765 --> 00:01:23.370
我们要把图像每个像素的明度 也即 V 分量分离出来

00:01:23.370 --> 00:01:27.645
这个分量受照明条件的影响最大

00:01:27.644 --> 00:01:32.399
而 H 通道则基本不受阴影或过高亮度的影响

00:01:32.400 --> 00:01:36.719
如果我们依靠这个通道 舍弃 V 通道的信息

00:01:36.718 --> 00:01:42.179
那就能对彩色物体进行检测 而且效果会比在 RGB 颜色空间中更为可靠

00:01:42.180 --> 00:01:47.045
在这个 notebook 里 我读取了张水球图并将其显示出来

00:01:47.045 --> 00:01:49.844
我将分别使用 RGB 颜色空间

00:01:49.844 --> 00:01:53.370
和 HSV 空间 看看哪个空间能选中所有粉色气球

00:01:53.370 --> 00:01:56.490
现在图像每个像素都有

00:01:56.489 --> 00:02:00.704
代表位置的 x 和 y 值 以及代表颜色的 RGB 值

00:02:00.704 --> 00:02:03.239
为了查看这些颜色的相关值

00:02:03.239 --> 00:02:06.045
我要把这些颜色值提取出来

00:02:06.045 --> 00:02:08.655
我管这些值叫颜色通道 我要把它们展示出来

00:02:08.655 --> 00:02:10.465
要分离出红色通道

00:02:10.465 --> 00:02:12.599
我可以取 RGB 图像数组 image_copy

00:02:12.599 --> 00:02:18.254
然后取数组前两栏的所有 x 值和 y 值

00:02:18.254 --> 00:02:23.094
接着 在第三栏输入索引值 0 这就是每个像素的红色值

00:02:23.094 --> 00:02:28.384
同样的 对于绿色和蓝色通道的处理 也是取所有图像像素的 x 和 y 坐标

00:02:28.384 --> 00:02:30.590
然后在第三栏分别输入索引值 1 和 2

00:02:30.590 --> 00:02:34.335
从而得到各像素的绿色和蓝色值

00:02:34.335 --> 00:02:40.004
然后绘制出这些通道的灰度版本 以便观察各通道的强度

00:02:40.004 --> 00:02:43.585
这就是三个通道在灰度图里的强度表现

00:02:43.585 --> 00:02:46.527
像素越亮 代表的红色、

00:02:46.526 --> 00:02:48.479
绿色或蓝色值就越高

00:02:48.479 --> 00:02:53.625
我们可以看到 粉色气球的红色值很高 蓝色值也相对比较高

00:02:53.625 --> 00:02:58.229
但值大小不一 特别是当气球位于阴影下的时候

00:02:58.229 --> 00:03:02.079
现在重复同样的操作 处理 HSV 颜色空间

00:03:02.080 --> 00:03:08.230
首先 和之前一样 用函数 cvtColor 把图像转换成  HSV 颜色空间

00:03:08.229 --> 00:03:12.824
这次的转换代码是 RGB2HSV

00:03:12.824 --> 00:03:16.728
这就能返回一张新的转换图像 我将其命名为 HSV

00:03:16.729 --> 00:03:19.480
然后把这些通道分离出来

00:03:19.479 --> 00:03:24.039
操作和之前一样 然后将结果并排绘制出来

00:03:24.039 --> 00:03:28.030
这就是那三个通道 色相、饱和度和明度

00:03:28.030 --> 00:03:30.884
对比一下原图

00:03:30.884 --> 00:03:33.379
注意粉色气球及其位置

00:03:33.379 --> 00:03:37.194
我们可以发现 粉色气球的色相通道值很高

00:03:37.194 --> 00:03:41.199
就算是在阴影里 色相值也差不多高

00:03:41.199 --> 00:03:43.750
饱和度和明度通道的值差异则要大许多

00:03:43.750 --> 00:03:47.930
特别是在阴影下和在气球边缘处

00:03:47.930 --> 00:03:52.569
下一步 分别为这两个颜色空间创建颜色阀值 以供对比

00:03:52.569 --> 00:03:56.560
这里我用取色器确定了粉色的范围

00:03:56.560 --> 00:04:01.590
并用相应的 RGB 值定义了上下限

00:04:01.590 --> 00:04:06.400
这些阀值允许值高的红色和值不高不低的蓝色通过

00:04:06.400 --> 00:04:09.960
接着 对 HSV 颜色空间进行同样的操作

00:04:09.960 --> 00:04:14.520
记住 色相这种衡量尺度的范围只在 0 - 180 之间

00:04:14.520 --> 00:04:19.850
这里我允许小范围的高值色相通过 通道范围在 160 - 180 之间

00:04:19.850 --> 00:04:26.020
饱和度和明度通道则不作限制 都为 0 - 255

00:04:26.019 --> 00:04:28.509
接着 创建掩膜图像

00:04:28.509 --> 00:04:31.974
以便观察两种阀值对粉色气球的选取效果

00:04:31.975 --> 00:04:34.555
首先 创建 RGB 掩膜

00:04:34.555 --> 00:04:38.259
和之前一样 我用了 OpenCV 的函数 inRange

00:04:38.259 --> 00:04:42.435
向函数输入 RGB 图像以及粉色阀值的上下限

00:04:42.435 --> 00:04:45.639
接着 我建了个图像副本 应用掩膜

00:04:45.639 --> 00:04:51.129
将像素设为 0 选取掩膜为 0 的部分 也就是黑色部分

00:04:51.129 --> 00:04:53.274
最后 绘制成图

00:04:53.274 --> 00:04:57.310
正如大家所见 我们除了选出大部分粉色区域外

00:04:57.310 --> 00:05:02.259
还选出了其它的一些区域 而在阴影下的那部分粉色气球则没被选出来

00:05:02.259 --> 00:05:06.009
重复上述操作 处理 HSV 图像 用函数 inRange 创建掩膜

00:05:06.009 --> 00:05:12.105
输入转换成 HSV 颜色的图像以及色相的上下限

00:05:12.105 --> 00:05:14.890
复制图像 在副本上应用掩膜

00:05:14.889 --> 00:05:18.164
将掩膜为 0 处的图像区域遮住

00:05:18.165 --> 00:05:22.580
看看这个选择结果 我们会发现几乎所有粉色气球都被选中了

00:05:22.579 --> 00:05:25.209
由此可见 HSV 空间

00:05:25.209 --> 00:05:29.069
更擅长选择处于不同光线下的区域

