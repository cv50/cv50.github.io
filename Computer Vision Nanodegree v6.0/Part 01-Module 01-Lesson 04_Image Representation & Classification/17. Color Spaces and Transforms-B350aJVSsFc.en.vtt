WEBVTT
Kind: captions
Language: en

00:00:03.299 --> 00:00:07.509
So we've seen how to detect a blue screen background.

00:00:07.509 --> 00:00:10.240
But this detection assumed that the scene was very well

00:00:10.240 --> 00:00:13.815
lit and that the screen was a very consistent blue.

00:00:13.814 --> 00:00:16.359
What would happen if the lighting changed and part of

00:00:16.359 --> 00:00:19.509
the wall was in shadow or washed out and bright?

00:00:19.510 --> 00:00:24.005
The simple blue color threshold wouldn't work very well in this scenario.

00:00:24.004 --> 00:00:28.739
So how can we consistently detect objects under varying light conditions?

00:00:28.739 --> 00:00:31.239
Well, there are many other ways to represent

00:00:31.239 --> 00:00:34.119
the colors in an image besides just composed of red,

00:00:34.119 --> 00:00:35.934
green, and blue values.

00:00:35.935 --> 00:00:40.329
These different color representations are often called "color spaces".

00:00:40.329 --> 00:00:44.335
RGB is red, green, blue color space.

00:00:44.335 --> 00:00:46.645
You can think of this as a 3D space where

00:00:46.645 --> 00:00:50.280
any color can be represented by a 3D coordinate of R,

00:00:50.280 --> 00:00:52.300
G, and B values.

00:00:52.299 --> 00:00:55.629
For example, white is on the corner here with a value of

00:00:55.630 --> 00:01:00.995
255 255 255 for red green and blue values.

00:01:00.994 --> 00:01:05.579
There's also HSV color space for hue, saturation, and value.

00:01:05.579 --> 00:01:09.289
And HLS for hue, lightness, and saturation.

00:01:09.290 --> 00:01:13.915
And these are some of the most commonly used color spaces in image processing.

00:01:13.915 --> 00:01:18.765
We'll be going through an image processing example in HSV color space.

00:01:18.765 --> 00:01:23.370
This isolates the value or V component of each pixel in an image.

00:01:23.370 --> 00:01:27.645
And this is the component that varies the most under different lighting conditions.

00:01:27.644 --> 00:01:32.399
The H channel stays fairly consistent under shadow or excessive brightness.

00:01:32.400 --> 00:01:36.719
And if we rely mainly on this channel and discard the information in the V channel,

00:01:36.718 --> 00:01:42.179
we should be able to detect colored objects more reliably than in RGB color space.

00:01:42.180 --> 00:01:47.045
In this notebook, I read in an image of water balloons and displayed it.

00:01:47.045 --> 00:01:49.844
I'll be trying to use RGB color space and

00:01:49.844 --> 00:01:53.370
HSV to see if I can select all the pink balloons.

00:01:53.370 --> 00:01:56.490
Right now each pixel and this image has x and

00:01:56.489 --> 00:02:00.704
y values for its position in RGB values for its color.

00:02:00.704 --> 00:02:03.239
And to see the relative values of each of

00:02:03.239 --> 00:02:06.045
these colors or isolate each of these color values,

00:02:06.045 --> 00:02:08.655
which I'll call color channels, and display them.

00:02:08.655 --> 00:02:10.465
To isolate the red channel,

00:02:10.465 --> 00:02:12.599
I can just take the RGB image array,

00:02:12.599 --> 00:02:18.254
image copy take all the x and the y values in the first two array columns.

00:02:18.254 --> 00:02:23.094
Then the zero index of the third column which is the red value for each pixel.

00:02:23.094 --> 00:02:28.384
Similarly, for green and blue I'll take all the x and y coordinates of the image pixels,

00:02:28.384 --> 00:02:30.590
and take the first and second index of

00:02:30.590 --> 00:02:34.335
the third column to get the green and blue values for each pixel.

00:02:34.335 --> 00:02:40.004
Then I can plot each of these channels in grayscale to see their relative intensities.

00:02:40.004 --> 00:02:43.585
And here are the three channels represented in grayscale intensity.

00:02:43.585 --> 00:02:46.527
The brighter pixels indicate higher values of red,

00:02:46.526 --> 00:02:48.479
green, or blue, respectively.

00:02:48.479 --> 00:02:53.625
We can see that the pink balloons have high values for red and medium high for blue.

00:02:53.625 --> 00:02:58.229
But there's a lot of variations especially when the balloon is in shadow.

00:02:58.229 --> 00:03:02.079
Now, let's repeat the same process for HSV color space.

00:03:02.080 --> 00:03:08.230
First, only to convert this image to HSV color space using CVT color as before.

00:03:08.229 --> 00:03:12.824
This time with the conversion code RGB to HSV.

00:03:12.824 --> 00:03:16.728
This will return a new converted image which I'll call HSV.

00:03:16.729 --> 00:03:19.480
Then I'll isolate each of these channels using

00:03:19.479 --> 00:03:24.039
the same process as before and I'll plot them on the same axis.

00:03:24.039 --> 00:03:28.030
Here are the three channels hue, saturation, and value.

00:03:28.030 --> 00:03:30.884
And let's compare it to our original image.

00:03:30.884 --> 00:03:33.379
Note the pink balloons and their location.

00:03:33.379 --> 00:03:37.194
Here we can see that the hue channel is pretty high for pink balloons,

00:03:37.194 --> 00:03:41.199
and even in shadow the hue level is pretty consistent.

00:03:41.199 --> 00:03:43.750
The saturation and value channels vary a lot

00:03:43.750 --> 00:03:47.930
more especially under shadow and at the edges of balloons.

00:03:47.930 --> 00:03:52.569
The next step is to create color thresholds in both these colors spaces to compare.

00:03:52.569 --> 00:03:56.560
Here I've determined the pink color range by using a color selector,

00:03:56.560 --> 00:04:01.590
and defined the lower and upper boundaries in our RGB values to reflect this.

00:04:01.590 --> 00:04:06.400
These thresholds allow some high values of red and medium values of blue.

00:04:06.400 --> 00:04:09.960
Next I'll do the same thing in HSV color space.

00:04:09.960 --> 00:04:14.520
Remember that hue only goes from 0 - 180 as a measurement of degrees.

00:04:14.520 --> 00:04:19.850
Here I'm allowing a narrow high range for the hue channel from 160 - 180.

00:04:19.850 --> 00:04:26.020
And I'm allowing any value for the saturation and value channels, 0 - 255.

00:04:26.019 --> 00:04:28.509
Next I'll create masked images to see how

00:04:28.509 --> 00:04:31.974
well each of these thresholds selects the pink balloons.

00:04:31.975 --> 00:04:34.555
First I'll create the RGB mask.

00:04:34.555 --> 00:04:38.259
As before I'm using open CVs in range function,

00:04:38.259 --> 00:04:42.435
our RGB image and the lower and upper pink thresholds.

00:04:42.435 --> 00:04:45.639
Next I'll create a copy of the image and apply the mask,

00:04:45.639 --> 00:04:51.129
setting the pixels equal to zero where the mask is equal to zero or black.

00:04:51.129 --> 00:04:53.274
And finally, I'll display the result.

00:04:53.274 --> 00:04:57.310
And we can see that this selects most of the pink area but also has

00:04:57.310 --> 00:05:02.259
some other sections and it misses the parts of the balloons that are in shadow.

00:05:02.259 --> 00:05:06.009
Then I'll do the same with our HSV image creating a mask using

00:05:06.009 --> 00:05:12.105
inRange passing in our HSV color converted image and our lower and upper hue boundaries.

00:05:12.105 --> 00:05:14.890
I'll then create another masked image blocking out

00:05:14.889 --> 00:05:18.164
the part of the image with a mask is equal to zero.

00:05:18.165 --> 00:05:22.580
If we look at this selection we can see that the pink balloons are almost all selected,

00:05:22.579 --> 00:05:25.209
and we can see that HSV space is actually more

00:05:25.209 --> 00:05:29.069
valuable in selecting an area under varying light conditions.

