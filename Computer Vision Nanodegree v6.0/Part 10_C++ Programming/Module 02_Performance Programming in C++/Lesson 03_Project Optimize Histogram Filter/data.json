{
  "data": {
    "lesson": {
      "id": 348285,
      "key": "28a33f6e-32a4-4cc4-81f3-c462f4a89b58",
      "title": "Project: Optimize Histogram Filter",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Get ready to optimize some C++ code. You are provided with a working 2-dimensional histogram filter; your job is to get the histogram filter code to run faster!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/28a33f6e-32a4-4cc4-81f3-c462f4a89b58/348285/1544453150672/Project%3A+Optimize+Histogram+Filter+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/28a33f6e-32a4-4cc4-81f3-c462f4a89b58/348285/1544453147927/Project%3A+Optimize+Histogram+Filter+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 348286,
          "key": "1143aecb-0a66-4655-a200-e7d2051789f5",
          "title": "Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1143aecb-0a66-4655-a200-e7d2051789f5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 442400,
              "key": "a98f82f3-c409-4e61-99a7-3d4e90b6417f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Overview\n\nNow it's time to apply what you've learned to Andy's histogram filter. In his code, you will find eight C++ files. Six of these files contain histogram filter functions. The other two are a main.cpp file and a file containing a function for printing out a matrix.\n\nYour challenge is to read through his files, run the program, and then get his code to run faster.\n\n**This project is non-graded**, so we are also providing a solution for you in the section labeled \"Solution Code\". There is not necessarily a wrong and right answer to this project; the goal is to get the code to run faster. The example solution shows a few possible ways to optimize. ",
              "instructor_notes": ""
            },
            {
              "id": 442397,
              "key": "631a4d15-8591-4a3a-ba8e-e6ddcae95fd6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Files\n\nIn the next part of the lesson, you will find an embedded workspace that contains the following files and folders:\n* andy_histogram_filter folder\n* optimized code folder\n* instructions.md file\n\n##### andy_histogram_filter\n\nThe andy_histogram_filter folder contains Andy's histogram filter code. There is a main.cpp file that runs and times each function of the histogram filter. The time results are outputted to the terminal.\n\nThe other .cpp files contain function definitions for the histogram filter. \n\n##### optimized_code\n\nThe optimized_code folder contains a copy of Andy's histogram filter code as well. This is where you can tweak the code for optimization. These files have extra comments giving some ideas about what to optimize.\n\n##### instructions.md\n\nThis file contains further instructions about how to complete and run the project. \n\n##### hints.md\n\nThe optimized_code files already have ideas about what to optimize. The hints file contains more explicit ideas but does not give the actual code. You are not required to read this file, and we encourage you to try optimizing the code first before reading the hints file.",
              "instructor_notes": ""
            },
            {
              "id": 457155,
              "key": "ff303db8-7600-4b90-8856-481fb3867d77",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Explanation of the Code\n\nHere is an explanation of how the histogram filter code works. \n\nIn main.cpp, you'll find a vector called grid. Grid is a char vector holding the color values of a 2-dimensional square grid. \n\nThe **initialize_beliefs** function takes in the char grid and outputs the initial probabilities for each square on the grid.\n\nThen the **sense** function takes a measurement of the current grid space's color. The measurement is used to update the probabilities of each space on the grid.\n\nNext, the **blur** function passes the grid through a smoothing  algorithm.\n\nThen the probabilities are normalized with the **normalize** function.\n\nFinally, the robot moves to a new space on the board, and the probabilities are updated appropriately.\n\nEach function is run ten-thousand times. You can adjust the number of times by changing the value in the iterations variable.\n",
              "instructor_notes": ""
            },
            {
              "id": 457113,
              "key": "fb9992f4-5a4f-4156-a876-bdc7f48ec17b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Order\n\nAs a suggestion, do the project in the following order:\n1. Read through the instructions in instructions.md\n2. Run the code in the andy_histogram_filter folder (see instructions.md for how to run the code)\n3. Open main.cpp and look through the code. You do not need to change anything in this file. Note that each function is run the same number of times. And each function is wrapped with a clock. \n4. Read through each of the .cpp files to become familiar with the code.\n5. Optimize the code in the optimized_code folder. For each optimization, make sure to run the code to see if the results have in fact improved.\n\nHere is a suggested order for optimizing the files:\n* zeros.cpp\n* initialize_beliefs.cpp\n* sense.cpp\n* blur.cpp\n* normalize.cpp\n* move.cpp\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 489399,
          "key": "9499c234-bb05-42d0-bc6d-a312774d935b",
          "title": "Project Walk Through",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9499c234-bb05-42d0-bc6d-a312774d935b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 490061,
              "key": "4d2c1445-1693-4b0f-b25a-da6dce6e7e92",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Walk Through\n\nThe next video shows a walk-through of the project. You'll get an overview of how the project is set up as well as ideas about how to approach the project. Don't worry, it doesn't give away the answers!",
              "instructor_notes": ""
            },
            {
              "id": 489679,
              "key": "2b93bfb5-5787-4f44-ad1a-a10f31c8af9c",
              "title": "Nd113 Running The Project V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Andrew mentions the C++ Slack in the video, but you should use Student Hub for your questions for fellow students!",
              "video": {
                "youtube_id": "-X1pB-HTdnQ",
                "china_cdn_id": "-X1pB-HTdnQ.mp4"
              }
            }
          ]
        },
        {
          "id": 442401,
          "key": "d222952e-bdf6-4abb-b44a-c2cdd45de73a",
          "title": "Project Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d222952e-bdf6-4abb-b44a-c2cdd45de73a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 442431,
              "key": "54b84dfc-f75c-42fc-a178-9dd099a46e10",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view01f6e319",
              "pool_id": "webterminal",
              "view_id": "01f6e319-1d29-46ff-965f-3db0c137c5f9",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/instructions.md"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false,
                    "actionButtonText": "Preview"
                  },
                  "kind": "react"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 467014,
          "key": "2389350b-a451-403d-b504-68215beb32db",
          "title": "GCC Flags",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2389350b-a451-403d-b504-68215beb32db",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 467020,
              "key": "ae3cde13-880e-4ce5-8eb4-664c692fbdf7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### GCC Compiler Optimization\n\nIn the classroom, you have been using a compiler called GCC. You've been compiling code with the following command:\n\n```\ng++ -std=c++11 main.cpp blur.cpp initialize_beliefs.cpp move.cpp normalize.cpp print.cpp sense.cpp zeros.cpp\n```\n\nBy default, gcc will try to lower the time it takes to compile your code; in other words, gcc optimizes for compilation time. \n\nHowever, gcc can also optimize for execution time to get your code to run faster. The gcc compiler includes three levels of optimization, which you can use by adding the optimization flag to your compilation command:\n-O1\n-O2\n-O3\n\nYou can read more about what each level does at this link: [Optimization Flags Link](https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html)\n\nNow that you have optimized your histogram filter code, go back and try compiling the program with the level three flag. See how much the compiler can help you speed up your code.\n\nHere is the command for compiling with level three optimization:\n\n```\ng++ -std=c++11 -O3 main.cpp blur.cpp initialize_beliefs.cpp move.cpp normalize.cpp print.cpp sense.cpp zeros.cpp\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 442434,
          "key": "b23f1900-5097-4e2c-a1a1-500a58211b77",
          "title": "Project Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b23f1900-5097-4e2c-a1a1-500a58211b77",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 442435,
              "key": "2f8faf71-693e-41f5-a08d-5037d9288667",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Project Solution\n\nIn the next section, we are providing a potential solution to the code optimization project. Each file contains comments noting what changes have been made to make the code run faster.\n\nWe suggest waiting to look at the solution until after you've tried optimizing the code yourself - see if you can do even better!",
              "instructor_notes": ""
            },
            {
              "id": 779977,
              "key": "28846cae-a73c-4afa-b4ed-1024cc9eebd4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Potential Results\n\nHere are some potential results between Andy's code, another Udacian's optimized code, as well as both using the `-O3` flag at compile time.\n\n| Code        |  Sum of Runtimes  |\n| :-------------: | :----------:|\n| Andy's original      |  ~350 ms |\n| Udacian's optimized      |    ~135 ms |\n| Andy's with -O3 |  ~70 ms |\n| Udacian's with -O3 | ~20 ms |\n\nOptimizing your code, as well as using the appropriate compiler flags, can make a **huge** difference. Note that the most optimized result above takes only 6% of the time to run as Andy's original code.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 442436,
          "key": "c94ffdb3-e4ad-4ff8-9bc5-56853507ff08",
          "title": "Solution Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c94ffdb3-e4ad-4ff8-9bc5-56853507ff08",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 442437,
              "key": "105b579f-44d7-46aa-97f8-d6e3ec5665d2",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewbe2484bd",
              "pool_id": "webterminal",
              "view_id": "be2484bd-897d-4c10-9f73-b08fc2cc1c9d",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/instructions.md"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "actionButtonText": "Preview",
                    "openTerminalOnStartup": true
                  },
                  "kind": "react"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        }
      ]
    }
  }
}