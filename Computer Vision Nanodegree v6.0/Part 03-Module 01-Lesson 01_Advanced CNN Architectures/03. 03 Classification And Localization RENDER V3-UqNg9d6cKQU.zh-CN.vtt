WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.180
在我们看到的分类任务中

00:00:03.180 --> 00:00:07.835
我们将图像输入到 CNN 中 然后 CNN 为整个图像输出一个标签

00:00:07.835 --> 00:00:10.378
但有时候需要更多信息

00:00:10.378 --> 00:00:16.064
例如对象在图像中的哪个位置 称之为定位

00:00:16.065 --> 00:00:20.109
例如 假设有一张包含多位篮球运动员的图像

00:00:20.109 --> 00:00:24.144
你想知道目前拿着球的运动员是谁

00:00:24.144 --> 00:00:25.515
要完成此任务

00:00:25.515 --> 00:00:29.870
你需要定位并识别篮球和握着篮球的运动员

00:00:29.870 --> 00:00:34.000
各种安全应用也用到了定位技术

00:00:34.000 --> 00:00:38.799
例如 婴儿监视器会检查婴儿是否安全地位于婴儿床里

00:00:38.799 --> 00:00:40.750
甚至安全驾驶应用

00:00:40.750 --> 00:00:43.570
也用到了定位技术

00:00:43.570 --> 00:00:45.685
摄像头会查看驾驶员在车辆中的位置

00:00:45.685 --> 00:00:49.000
以及眼睛 手机和周围其他物品的位置

00:00:49.000 --> 00:00:52.804
判断驾驶员是否分神了

00:00:52.804 --> 00:00:55.679
对于任何需要查看两个或多个对象的距离的应用

00:00:55.679 --> 00:00:59.259
定位技术都很重要

00:00:59.259 --> 00:01:02.364
我们来看一个简单的定位示例 这是一张猫的图像

00:01:02.365 --> 00:01:05.894
除了将该图像标记为猫之外

00:01:05.894 --> 00:01:09.569
我们还需要定位该图像中的猫

00:01:09.569 --> 00:01:13.875
典型方法是在该猫周围画一个边界框

00:01:13.875 --> 00:01:18.004
这个方框可以看做定义该方框的一系列坐标

00:01:18.004 --> 00:01:21.640
(x,y) 可以是方框的中心

00:01:21.640 --> 00:01:23.515
w 和 h 分别表示方框的宽和高

00:01:23.515 --> 00:01:25.709
要计算这些值 我们可以使用典型分类 CNN

00:01:25.709 --> 00:01:29.294
用到的很多相同结构

00:01:29.295 --> 00:01:33.430
一种定位方式是首先将给定图像

00:01:33.430 --> 00:01:38.155
传入一系列卷积层和池化层 并为该图像创建一个特征向量

00:01:38.155 --> 00:01:43.045
保留相同的全连接层进行分类

00:01:43.045 --> 00:01:45.370
然后在特征向量之后添加另一个全连接层

00:01:45.370 --> 00:01:49.875
目的是预测边界框的位置和大小

00:01:49.875 --> 00:01:52.640
我将称其为边界框坐标

00:01:52.640 --> 00:01:54.635
在这个 CNN 中

00:01:54.635 --> 00:01:58.540
有一个输出路径 作用是为图像中的对象生成类别

00:01:58.540 --> 00:02:03.525
另一个输出路径的作用是生成该对象的边界框坐标

00:02:03.525 --> 00:02:08.319
在这个示例中 我们假设输入图像不仅具有相关的真实标签

00:02:08.319 --> 00:02:10.905
而且具有真实的边界框

00:02:10.905 --> 00:02:13.419
这样我们可以通过

00:02:13.419 --> 00:02:17.949
对比类别和边界框的预测值和真实值训练网络

00:02:17.949 --> 00:02:20.379
我们已经知道如何使用交叉熵损失等

00:02:20.379 --> 00:02:23.889
衡量分类模型的性能

00:02:23.889 --> 00:02:28.399
交叉熵适合概率值在 0 和 1 之间的模型

00:02:28.400 --> 00:02:31.560
但是对于边界框 我们需要其他损失函数

00:02:31.560 --> 00:02:33.750
这种函数能够衡量

00:02:33.750 --> 00:02:36.365
预测边界框和真实边界框之间的误差

00:02:36.365 --> 00:02:38.909
接下来 你将了解对于这样的回归问题

00:02:38.909 --> 00:02:41.370
什么样的损失函数比较合适

00:02:41.370 --> 00:02:44.200
能够对比数量 而不是类别得分

