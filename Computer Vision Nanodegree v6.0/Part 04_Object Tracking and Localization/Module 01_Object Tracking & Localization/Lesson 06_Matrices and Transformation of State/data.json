{
  "data": {
    "lesson": {
      "id": 626688,
      "key": "5922a820-02ac-4075-b38d-77505b5e32bc",
      "title": "Matrices and Transformation of State",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Linear Algebra is a rich branch of math and a useful tool. In this lesson you'll learn about the matrix operations that underly multidimensional Kalman Filters.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/5922a820-02ac-4075-b38d-77505b5e32bc/626688/1544453479874/Matrices+and+Transformation+of+State+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/5922a820-02ac-4075-b38d-77505b5e32bc/626688/1544453476440/Matrices+and+Transformation+of+State+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 630725,
          "key": "0d4a664d-c3ff-419c-8cbe-5a7a9a1b563e",
          "title": "Kalman Filter Land",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0d4a664d-c3ff-419c-8cbe-5a7a9a1b563e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631455,
              "key": "57c6d2b5-e535-4312-9e6e-d50814c34e74",
              "title": "Kalman Filter Land RENDER 1 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6xupqulu0bc",
                "china_cdn_id": "6xupqulu0bc.mp4"
              }
            }
          ]
        },
        {
          "id": 630732,
          "key": "2768e90c-69b0-42ac-a5f8-c7dc8209201c",
          "title": "Kalman Filter Prediction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2768e90c-69b0-42ac-a5f8-c7dc8209201c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631456,
              "key": "12d38b79-72d6-4997-88c0-a3b119c99026",
              "title": "QUIZ Kalman Filter Prediction 01 RENDER V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DjoBJNLzhj8",
                "china_cdn_id": "DjoBJNLzhj8.mp4"
              }
            },
            {
              "id": 631458,
              "key": "7f403c07-5958-4a73-a15f-15c8240a867f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "See the answer below.",
              "instructor_notes": ""
            },
            {
              "id": 631459,
              "key": "f99552dc-0d33-4ad2-9a7c-e6d44192b901",
              "title": "QUIZ Kalman Filter Prediction 02 RENDER V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OelWLjfdSyw",
                "china_cdn_id": "OelWLjfdSyw.mp4"
              }
            }
          ]
        },
        {
          "id": 630735,
          "key": "c45fcfa6-1eba-48c6-98b2-a236f3eb9b2e",
          "title": "Another Prediction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c45fcfa6-1eba-48c6-98b2-a236f3eb9b2e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631460,
              "key": "7588bce0-47fb-4f83-aa2f-c44bb5297ccf",
              "title": "QUIZ Another Prediction 01 RENDER V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wdSkHh-6U4Y",
                "china_cdn_id": "wdSkHh-6U4Y.mp4"
              }
            },
            {
              "id": 631461,
              "key": "b69561ce-7b67-4e5a-b986-f1eaa1f41a94",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "See the answer below.",
              "instructor_notes": ""
            },
            {
              "id": 631462,
              "key": "fc39d0ca-ceb5-4c0b-9166-8df2549708c0",
              "title": "QUIZ Another Prediction 02 RENDER V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RfzQ5MbVNeQ",
                "china_cdn_id": "RfzQ5MbVNeQ.mp4"
              }
            }
          ]
        },
        {
          "id": 630738,
          "key": "0b275d08-b56b-4be4-ac6e-dbf40c6b3a74",
          "title": "More Kalman FIlters",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0b275d08-b56b-4be4-ac6e-dbf40c6b3a74",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631464,
              "key": "9790da22-0eea-4678-843c-e45939cd883e",
              "title": "More Kalman Filters RENDER V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5QYGm4D9z6Y",
                "china_cdn_id": "5QYGm4D9z6Y.mp4"
              }
            },
            {
              "id": 634210,
              "key": "51fd5612-e884-47e0-ab9f-9214872017ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Correction\n\nThe equation for calculating the next position x should read as an addition: <span class=\"mathquill\">x' = x + \\dot{x}  \\Delta t</span>\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 410554,
          "key": "b5dd5abc-bd35-40b8-9169-ddcd91e7847e",
          "title": "A Note on Notation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b5dd5abc-bd35-40b8-9169-ddcd91e7847e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 410559,
              "key": "7ca1e26a-a276-4aee-b759-64ac5940bef2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# A Note on Notation\n\nIn the previous video (and in the next) you saw the following equation:\n\n<span class=\"mathquill\">x' = x + \\dot{x}</span> \n\nTranslated into plain speech, this says \n\n>the x position **after** motion (<span class=\"mathquill\">x'</span>) is equal to the x position **before** motion (<span class=\"mathquill\">x</span>) plus the velocity in the x direction (<span class=\"mathquill\">\\dot{x}</span>).\n\nIf you read through that statement, you might notice that it doesn't quite make sense because it doesn't take into account the **duration** of motion. If I drive for 10 seconds I go farther than if I only drive for 1 second! \n\nIn the previous video we are assuming that the duration of motion (typically called <span class=\"mathquill\">\\Delta t</span>) is equal to 1 second. The \"complete\" version of the equation above would be\n\n<span class=\"mathquill\">x' = x + \\dot{x}  \\Delta t</span>\n\n| **Symbol** | **Meaning** |\n|:------:|:--------:|\n|   <span class=\"mathquill\">x</span>   | x position **before** motion |\n|   <span class=\"mathquill\">x'</span>   | x position **after** motion   |\n|   <span class=\"mathquill\">\\dot{x}</span>  | velocity in x direction         |\n| <span class=\"mathquill\">\\Delta t</span> | duration of motion \"delta t\" |\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 630739,
          "key": "c2baecf1-1681-407f-a7a4-98ac0a793abe",
          "title": "Kalman Filter Design",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c2baecf1-1681-407f-a7a4-98ac0a793abe",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631463,
              "key": "4bb15ae1-5b2b-456f-9500-8c7d59c111ad",
              "title": "KALMAN  Kalman Filter Design RENDER V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7C_tsAr8PNM",
                "china_cdn_id": "7C_tsAr8PNM.mp4"
              }
            },
            {
              "id": 631465,
              "key": "8b2e5b76-2b94-4923-a8fa-4a08ad72f055",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### A note on time\n\nIn the above equation we see that x' = x + velocity, but we know that the complete equation is `x' = x + delta-t*velocity`. In this example, Sebastian assumes that delta t = 1 (that a time step is always one), which is allows him to simplify this equation.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 631496,
          "key": "962e1f88-6a29-46bd-8289-133bfd9a6584",
          "title": "Let's Look at Where We Are",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "962e1f88-6a29-46bd-8289-133bfd9a6584",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631497,
              "key": "f4f93124-3a55-47d9-8c09-275842010046",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What You've Learned\n\nSo far, you've really done a lot in this section of the course. You've:\n* Programmed a **histogram filter**\n* Learned about the sense/move cycle in a Kalman Filter\n* Implemented a 1D Kalman Fillter\n* Learned how to represent a car's motion and **state** in a **vector** that could be transformed\n\nAnd you've just learned a but about 2D and multidimensional Kalman Filters.\n\n## Linear Algebra and the Kalman Equations\n\nNow, Sebastian said \"not to worry\" about the complex Kalman equations that he's written, but this course is meant to be a good foundation for real-world programming challenges. So, the rest of this lesson will be about how to really understand these equations. Along the way, you'll learn a bit about how to approach a challenge like this and learn a lot of linear algebra that will allow you to read any equations like the Kalman filter equations with relative ease! \n\nIf you are already comfortable with linear algebra, feel free to skip around this section, otherwise, let's learn more about these equations and the powerful tool: linear algebra!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 410325,
          "key": "4e27ce88-5dd3-46a8-b95d-d5cc37b5e9c9",
          "title": "The Kalman Filter Equations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4e27ce88-5dd3-46a8-b95d-d5cc37b5e9c9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 419813,
              "key": "9b7b4e3f-0a17-4edb-8065-b23b3b7529f2",
              "title": "Nd113 C2 L3 08 L The Kalman Filter Equations V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "X9UUpk5URuw",
                "china_cdn_id": "X9UUpk5URuw.mp4"
              }
            }
          ]
        },
        {
          "id": 410594,
          "key": "961193dd-993c-4176-9f5d-d10070dfac06",
          "title": "Simplifying the Kalman Filter Equations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "961193dd-993c-4176-9f5d-d10070dfac06",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 420910,
              "key": "d5a21397-dc65-4884-9180-dd09749e4ca5",
              "title": "Nd113 C2 L3 09 L Simplifying The Kalman Filter Equations V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UpC0D-SEtD0",
                "china_cdn_id": "UpC0D-SEtD0.mp4"
              }
            },
            {
              "id": 498309,
              "key": "035fdfd4-70c1-4409-a96b-91d651dda6f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Kalman Filter Equations Fx versus Bu\n\nConsider this specific Kalman filter equation:\n<span class=\"mathquill\">x' = Fx + Bu</span>.\n\nThis equation is the move function that updates your beliefs in between sensor measurements.  Fx models motion based on velocity, acceleration, angular velocity, etc of the object you are tracking.\n\nB is called the control matrix and u is the control vector. Bu measures  extra forces on the object you are tracking. An example would be if a robot was receiving direct commands to move in a specific direction, and you knew what those commands were and when they occurred. Like if you told your robot to move backwards 10 feet, you could model this with the Bu term.\n\nWhen you take the self-driving car engineer nanodegree, you'll use Kalman filters to track objects that are moving around your vehicle like other cars, pedestrians, bicyclists, etc. In those cases, you would ignore <span class=\"mathquill\">Bu</span> because you do not have control over the movement of other objects. The Kalman filter equation becomes <span class=\"mathquill\">x' = Fx</span>.",
              "instructor_notes": ""
            },
            {
              "id": 644057,
              "key": "80cdf159-28b3-4c98-9125-6fa68d8b9ef7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 410639,
          "key": "42c033d2-2830-441c-a117-416bdf246d8c",
          "title": "The Rest of the Lesson",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42c033d2-2830-441c-a117-416bdf246d8c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 419638,
              "key": "046917fc-4a9b-4db8-99ab-90421a9f3e4f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Rest of the Lesson\nThe rest of this lesson will introduce you to **vectors**, **matrices** and the **operations** associated with them. Most of the instruction will be in the form of code demonstrations. \n\nDepending on your background you may need to adjust your pace through the rest of this lesson. If you have a mathematical background then there's a good chance you'll move very quickly through this content. If you haven't worked with math in a while you may need to go more slowly.\n\nA lot of people have bad memories with math and trying to learn something like linear algebra can sometime bring those memories back. If you start to feel stressed just step back, take a breath and remember that math is just another thing to learn. You can do it!\n\nIf you get stuck, don't hesitate to ask for help in the Study Groups or Knowledge. You've got classmates and staff who will be thrilled to help you learn!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 393248,
          "key": "4b987431-6149-4fc3-a197-925128a457c3",
          "title": "Representing State with Matrices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4b987431-6149-4fc3-a197-925128a457c3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 393249,
              "key": "fa8cad91-0a0d-45ac-a28c-26f6022671c0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Representing State with Matrices\n\n### The State Vector\nYou just learned how to represent a self-driving car's state using a motion model. It turns out that matrices provide a very convenient and compact form for representing a vehicle's state. \n\nLet's go back to the constant velocity motion model: \n\n<span class=\"mathquill\">distance = velocity \\times time</span>\n\nThe vehicle's state is represented by the two variables distance and velocity. If you were going to store these two variables in Python, you'd probably use a list like this:\n\n```python\nstate = [distance, velocity]\n```\n\nThat Python code looks a lot like a mathematical concept called a vector. A vector is essentially a list where each element in the list contains some information. \n\nYou could imagine that a state vector could have even more information. In a two-dimensional world, the state could have a <span class=\"mathquill\">distance_x</span>, <span class=\"mathquill\">distance_y</span>, <span class=\"mathquill\">velocity_x</span> and a <span class=\"mathquill\">velocity_y</span>.\n\nIn Python, the list would look like this:\n```python\nstate = [distance_x, distance_y, velocity_x, velocity_y]\n```\n\nOr an even more complex model could include information about the turning angle of the vehicle and the turning rate:\n```python\nstate = [distance_x, distance_y, velocity_x, velocity_y, angle, angle_rate]\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 393262,
              "key": "7f93282e-13f8-4356-9d16-cd9c031d02f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### State Vector in a One-Dimensional World\n\nFor now, consider the one-dimensional model with just distance and velocity.\n\n```python\nstate = [distance, velocity]\n```\n\nHow did you calculate the distance and velocity of the vehicle over time when the velocity was constant? There were two different equations. \n\n<span class=\"mathquill\">\n\\begin{cases}\ndistance = velocity \\times time \\\\\nvelocity = velocity\n\\end{cases}\n</span>\n\nNow, think about these equations in terms of state. For convenience, you can represent distance as <span class=\"mathquill\">x</span>, velocity as <span class=\"mathquill\">v</span>, and time as <span class=\"mathquill\">t</span>. \n\n##### Initial State\nWhen the vehicle first starts moving, you can consider that <span class=\"mathquill\">t = t_0</span>, <span class=\"mathquill\">x = x_0</span> and <span class=\"mathquill\">v = v_0</span>. So the state vector is <span class=\"mathquill\">state_0 = [x_0, v_0]</span>.",
              "instructor_notes": ""
            },
            {
              "id": 393411,
              "key": "74d58ab5-ba5d-40f0-a766-46c16d8e611c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##### First Time Step\n\nWhat about after a certain amount of time has passed and now you are at a time <span class=\"mathquill\">t_1</span>?  \n\nAt <span class=\"mathquill\">t_1</span>, the state vector is:\n\n<span class=\"mathquill\">state_1 = [x_1, v_1] </span>\n\n\nAccording to the model formulas, \n\n<span class=\"mathquill\">x_1 = x_0 + v_0 \\times (t_1 - t_0)</span>\n\nand since velocity is constant:\n \n<span class=\"mathquill\">v_1 = v_0</span>.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 393412,
              "key": "d7522f90-d591-4cd1-b5a2-4872798bdf53",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##### Second Time Step\n\nThen after the next time step <span class=\"mathquill\">t_2</span>, the state vector is:\n<span class=\"mathquill\">state_2 = [x_2, v_2]</span> \n\nwhere\n\n<span class=\"mathquill\">x_2 = x_1 + v_0 \\times (t_2 - t_1)</span>\n\nand since velocity is constant \n<span class=\"mathquill\">v_2 = v_0</span>.",
              "instructor_notes": ""
            },
            {
              "id": 393266,
              "key": "3918bf35-5170-4213-a3e9-bf60f3545b52",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### A Better Way\n\nThe math so far is not too hard, right? You have a distance equation and a velocity equation. You plug in the previous state into each equation, the time lapse, and you get the new velocity and the new distance.\n\nBut imagine what will happen as your self-driving car model gets more complex. What happens when you have to take into account an x-direction, y-direction, x and y velocities, and steering angle and angular velocity? Or what about an even more complex model like a drone or helicopter that also has a z-direction?\n\nInstead of updating your equations one by one, you can actually use vectors and matrices to do all of the calculations in just one step.",
              "instructor_notes": ""
            },
            {
              "id": 393422,
              "key": "7b993b03-6aeb-481b-b165-ba618b55778a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Updating State with Matrix Algebra\n\nIf you look back at the equation that updates the distance, you'll notice that distance depends on the previous distance, the initial velocity, and how much time has elapsed since the distance formula was updated. You end up with a generic function:\n\n<span class=\"mathquill\">x_{t+1} = x_{t} + v_0 \\times (t_{t+1} - t_{t}) </span>\n\nYou can also write <span class=\"mathquill\">t_{t+1} - t_{t}</span> as:\n\n<span class=\"mathquill\">\\Delta t</span>\n\nFor a constant velocity model, the generic velocity equation becomes:\n<span class=\"mathquill\">v_{t+1} = v_{t}</span> \n\nHow could you combine the x and v equations into one matrix algebra expression? The matrix algebra would look like this:\n\n<span class=\"mathquill\">\n\\begin {bmatrix} x_{t+1} \\\\ v_{t+1} \\end {bmatrix} =\n\\begin {bmatrix} 1&  \\Delta t \\\\\n0 & 1\n \\end{bmatrix}\n\\times\n\\begin {bmatrix} \nx_{t} \\\\ \nv_{t}\n \\end{bmatrix}\n</span>",
              "instructor_notes": ""
            },
            {
              "id": 393429,
              "key": "53d9fffe-89cb-4881-b65c-0b61ca27c315",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Don't worry if you're not sure what this expression means or how to multiply these matrices. You will learn how in this lesson.",
              "instructor_notes": ""
            },
            {
              "id": 393430,
              "key": "eb2efd9c-586b-4fb6-ae55-5596b8a66eb0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Notation\n\nThe matrix algebra equation you just saw is actually one part of the Kalman filter update equation.\n\nTraditionally, the matrix operation:\n\n<span class=\"mathquill\">\n\\begin {bmatrix} x_{t+1} \\\\ v_{t+1} \\end {bmatrix} =\n\\begin {bmatrix} 1&  \\Delta t \\\\\n0 & 1\n \\end{bmatrix}\n\\times\n\\begin {bmatrix} \nx_{t} \\\\ \nv_{t}\n \\end{bmatrix}\n</span>",
              "instructor_notes": ""
            },
            {
              "id": 393431,
              "key": "b166e46b-959b-443e-a278-d4e03cbcb528",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "is represented by this notation for Kalman filters:\n<span class=\"mathquill\">\n\\mathbf{\\hat{x}_{k|k-1}} = \\mathbf{F} \\mathbf{\\hat{x}_{k-1|k-1}}\n</span>\n\nwhere \n<span class=\"mathquill\">\\mathbf{\\hat{x}}</span> is the state vector and <span class=\"mathquill\">\\mathbf{F}</span> is the matrix\n\n<span class=\"mathquill\">\n\\begin {bmatrix} 1&  \\Delta t \\\\\n0 & 1\n \\end{bmatrix}\n</span>\n\n<span class=\"mathquill\">\\mathbf{k - 1}</span> is the previous step and <span class=\"mathquill\">\\mathbf{k }</span> is the current step. \n\nYou will see in the next part of the lesson why the notation contains <span class=\"mathquill\">\\mathbf{k-1|k-1}</span> and <span class=\"mathquill\">\\mathbf{k|k-1}</span> .",
              "instructor_notes": ""
            },
            {
              "id": 395057,
              "key": "774d6de1-4c72-4c79-8f52-7559fea434f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This notation can get a little bit confusing. For example, what is the difference between \n<span class=\"mathquill\">x</span> and <span class=\"mathquill\">\\mathbf{\\hat{x}}</span>?\n\nThe regular <span class=\"mathquill\">x</span> would usually represent distance along the x-axis; on the other hand, the bold <span class=\"mathquill\">\\mathbf{\\hat{x}}</span> indicates a vector. In the one-dimensional case being discussed here, the <span class=\"mathquill\">\\mathbf{\\hat{x}}</span> vector contains two variables: distance along the x-axis and velocity; hence\n<span class=\"mathquill\">\\bold{\\hat{x}} = \\begin{bmatrix} x \\\\ v \\end{bmatrix}</span>.\n\nWhy is there a capitalized bold <span class=\"mathquill\">\\mathbf{F}</span> instead of <span class=\"mathquill\">\\mathbf{f}</span>? The capitalized, bold <span class=\"mathquill\">\\mathbf{F}</span> tells you that this variable is a matrix.",
              "instructor_notes": ""
            },
            {
              "id": 395064,
              "key": "9c943261-01e5-48c8-a205-ac4bdfad60b7",
              "title": "Match the variable with its type",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9c943261-01e5-48c8-a205-ac4bdfad60b7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the variable with its type"
                },
                "concepts_label": "Variable",
                "answers_label": "Type",
                "concepts": [
                  {
                    "text": "**x**",
                    "correct_answer": {
                      "id": "a1505248972942",
                      "text": "vector"
                    }
                  },
                  {
                    "text": "x",
                    "correct_answer": {
                      "id": "a1505249026914",
                      "text": "scalar"
                    }
                  },
                  {
                    "text": "**F**",
                    "correct_answer": {
                      "id": "a1505249030943",
                      "text": "matrix"
                    }
                  },
                  {
                    "text": "p",
                    "correct_answer": {
                      "id": "a1505249039681",
                      "text": "scalar"
                    }
                  },
                  {
                    "text": "y",
                    "correct_answer": {
                      "id": "a1505249048630",
                      "text": "scalar"
                    }
                  },
                  {
                    "text": "**P**",
                    "correct_answer": {
                      "id": "a1505249054269",
                      "text": "matrix"
                    }
                  },
                  {
                    "text": "**p**",
                    "correct_answer": {
                      "id": "a1505249065285",
                      "text": "vector"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1505249054269",
                    "text": "matrix"
                  },
                  {
                    "id": "a1505249065285",
                    "text": "vector"
                  },
                  {
                    "id": "a1505249026914",
                    "text": "scalar"
                  },
                  {
                    "id": "a1505249048630",
                    "text": "scalar"
                  },
                  {
                    "id": "a1505249030943",
                    "text": "matrix"
                  },
                  {
                    "id": "a1505248972942",
                    "text": "vector"
                  },
                  {
                    "id": "a1505249039681",
                    "text": "scalar"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 393322,
          "key": "555e0c78-8acd-4eda-acf7-4d794be34978",
          "title": "Kalman Equation Reference",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "555e0c78-8acd-4eda-acf7-4d794be34978",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394559,
              "key": "a4b9670b-38f3-4c9c-8ec7-7f666c9eebc4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Kalman Equation Reference\nWe're just including this here in case you want to refer back to the Kalman Filter equations at any time. Feel free to move along :)\n\n### Variable Definitions\n\n<span class=\"mathquill\">\\mathbf{\\hat{x}}</span>  -   state vector\n\n<span class=\"mathquill\">\\mathbf{F}</span> - state transition matrix\n\n<span class=\"mathquill\">\\mathbf{P}</span>  -   error covariance matrix\n\n<span class=\"mathquill\">\\mathbf{Q}</span>  -  process noise covariance matrix\n\n<span class=\"mathquill\">\\mathbf{R}</span>  -   measurement noise covariance matrix\n\n<span class=\"mathquill\">\\mathbf{S}</span>  -   intermediate matrix for calculating Kalman gain\n\n<span class=\"mathquill\">\\mathbf{H}</span>  -   observation matrix\n\n<span class=\"mathquill\">\\mathbf{K}</span>  -   Kalman gain\n\n<span class=\"mathquill\">\\mathbf{\\tilde{y}}</span>  -   difference between predicted state and measured state\n\n<span class=\"mathquill\">\\mathbf{z}</span>  -   measurement vector (lidar data or radar data, etc.)\n\n<span class=\"mathquill\">\\mathbf{I}</span>  -   Identity matrix\n\n**Prediction Step Equations**\n\nPREDICT STATE VECTOR AND ERROR COVARIANCE MATRIX\n\n<span class=\"mathquill\">\\mathbf{\\hat{x}_{k|k-1}} = \\mathbf{F_{k}} \\mathbf{\\hat{x}_{k-1|k-1}}  </span>\n\n<span class=\"mathquill\">\\mathbf{P_{k|k-1}} = \\mathbf{F_{k}} \\mathbf{P_{k-1|k-1}} \\mathbf{F_{k}^T}  + \\mathbf{Q_{k}}</span>\n\n**Update Step Equations**\n\nKALMAN GAIN\n\n<span class=\"mathquill\">\\mathbf{S_{k}} = \\mathbf{H_{k}} \\mathbf{P_{k|k-1}} \\mathbf{H_{k}^T} + \n\\mathbf{R_{k}}</span>\n\n<span class=\"mathquill\">\\mathbf{K_{k}} = \\mathbf{P_{k|k-1}} \\mathbf{H_{k}^T} \\mathbf{S_{k}}^{-1}</span>\n\nUPDATE STATE VECTOR AND ERROR COVARIANCE MATRIX\n\n<span class=\"mathquill\">\\mathbf{\\tilde{y_{k}}} = \\mathbf{z_{k}} - \\mathbf{H_{k}} \\mathbf{\\hat{x}_{k|k-1}} </span>\n\n<span class=\"mathquill\">\\mathbf{\\hat{x}_{k|k}} = \\mathbf{\\hat{x}_{k|k-1}} +\\mathbf{ K_{k}} \\mathbf{\\tilde{y_{k}}}</span>\n\n<span class=\"mathquill\">\\mathbf{P_{k|k}} = (\\mathbf{I} - \\mathbf{ K_{k}}  \\mathbf{H_{k}}) \\mathbf{P_{k|k-1}}</span>\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 407642,
          "key": "2e834362-a86b-4159-baab-e5412b4fff95",
          "title": "What is a vector?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2e834362-a86b-4159-baab-e5412b4fff95",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 407643,
              "key": "d8ec7993-546d-4502-9138-6a76b66599d3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is a vector? Physics versus Computer Programming\n\nYou might have learned at some point that a vector is a measurement or quantity that has both a **magnitude** and a **direction**. Examples might be distance along a y-axis or velocity towards the north-west. \n\nBut in computer programming, when we say \"vector\" we are just referring a **list of values**. \n\nThese two ways of thinking about vectors are actually deeply related, but for this Nanodegree we're going to look at vectors from a computer science point of view.\n",
              "instructor_notes": ""
            },
            {
              "id": 407647,
              "key": "898a2e03-50e3-4fdd-b528-fc1c0741be21",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Vectors,  Motion Models and Kalman Filters in Self-Driving Cars\n\nIn a physics class, you might have one vector for position and then a separate vector for velocity. But in computer programming, a vector is really just a list of values.\n\nWhen using the Kalman filter equations, the bold, lower-case variable <span class=\"mathquill\">\\mathbf{x}</span> represents a vector in the computer programming sense of the word. The <span class=\"mathquill\">\\mathbf{x}</span> vector holds the values that represent your motion model such as position and velocity. \n\nIn a basic motion model, the vector <span class=\"mathquill\">\\mathbf{x}</span> will contain information about position and linear velocity like: <span class=\"mathquill\">\\mathbf{x} = [x, y, v_x, v_y]</span>. In a physics class, these might be represented with two different vectors: a position vector and a velocity vector.\n\nA more complex motion model might take into account yaw rate, which considers a rotational angle and angular velocity around the center of the vehicle like <span class=\"mathquill\">\\mathbf{x} = [x, y, v_x, v_y, \\psi, \\dot{\\psi}]</span>.\n\nSo in order to use the Kalman filter equations and execute object tracking, you have to be familiar with vectors and how to write programs with them.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 394593,
          "key": "03d8a923-80da-4dc2-8ee0-35e581588f58",
          "title": "Vectors in Python",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "03d8a923-80da-4dc2-8ee0-35e581588f58",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394783,
              "key": "d670f3ac-185d-48f3-8cc9-ec267b521014",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Vectors in Python\n\nIn Python, you can represent a vector with lists. So a vector like \n<span class=\"mathquill\">\\begin{bmatrix}5, 9, 10, 2, 20\\end{bmatrix}</span> \ncould be represented with \n\n```python\nmyvector = [5, 9, 10, 2, 20]\n```\n\n#### Vector Indexing\n\nIf you wanted to access values inside the vector, you would use indexing. The first value, which in this case is 5, would be accessed by\n\n```python\nmyvector[0]\n```\n\nThe second value:\n```python \nmyvector[1]\n```\n\nAnd so on.\n\n#### Assigning Values to Vectors\n\nIf you wanted to change a value in the vector, you could use this syntax:\n```python\nmyvector[3] = 19\n```\n\nwhich would change the fourth element from 20 to 19.\n\nTo add a value to the end of a vector, you can use the .append() method:\n```python\nmyvector = [5, 9, 2, 20]\nmyvector.append(18)\n```\nand the resulting vector would be [5, 9, 2, 20, 18].",
              "instructor_notes": ""
            },
            {
              "id": 407650,
              "key": "45f8b7ea-8e6f-4bf6-b0da-8b30d3cd4510",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Vector Math in Python\n\nThere are a few vector operations you'll want to become familiar with in order to use the Kalman filter equations: \n* vector addition\n* scalar multiplication \n* the dot product",
              "instructor_notes": ""
            },
            {
              "id": 407652,
              "key": "51fe5dc7-be07-40fb-b06e-43240eedf17a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Vector Addition\n\nTo add two vectors together, you sum them element by element. For example, \n\n<span class=\"mathquill\">\\mathbf{v_1} = [a, b, c, d]</span>\n\n<span class=\"mathquill\">\\mathbf{v_2} = [w, x, y, z]</span>\n\nThe sum of these two vectors would then be:\n\n<span class=\"mathquill\">\\mathbf{v_1} + \\mathbf{v_2} = [a + w, b + x, c + y,  d + z]</span>\n\nSay that you know the current state of your vehicle <span class=\"mathquill\">\\mathbf{x} = [x, y, v_x, v_y]</span>\n\nIf you knew the change in the position and velocity of your vehicle, you could use vector addition to find the new state vector. You will code this in the vector coding exercises. \n\n##### Vector addition Python Code\n\nHow might you execute vector addition using Python? In general, for loops are very useful for accessing values inside of a Python list:\n\n```python\n\nfor i in range(len(v1)):\n\tv1[i]\n```\n\nwould give you access to v1, one element at a time. So you could access each value of v1 and v2, sum them together, and then append each sum to a new vector like:\n\n```python\n# initialize an empty vector\nvsum = []\n\n# use for loops to take the sum of a value and then append to vsum\nfor ....\n      .....\n      vsum.append(value)\n```\n\nWe are not showing you the full answer because you will be figuring this out in a coding exercise.\n",
              "instructor_notes": ""
            },
            {
              "id": 407653,
              "key": "1c8b175a-2f32-438b-98a9-a65ab2b6b0b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Scalar Multiplication\n\nScalar multiplication involves multiplying each element in a vector by a constant. \n\nHere is a concrete example.\n\nIf <span class=\"mathquill\">\\mathbf{v} = [a, b, c, d]</span>, then <span class=\"mathquill\">5\\mathbf{v} = [5a, 5b, 5c, 5d]</span>\n\nYou will also implement scalar multiplication in the coding exercises. Think about how you can use a for loop and the append method to code scalar multiplication.\n\nA use case for scalar multiplication could be changing between units of measurement. For example, if your state were measured in meters, you could use scalar multiplication to convert to feet. Get ready to code this in the vector coding exercises!",
              "instructor_notes": ""
            },
            {
              "id": 407655,
              "key": "22f9b675-a254-4d9f-b5c9-480edc893ffc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Dot Product\n\nThe dot product of two vectors is very important for matrix multiplication. If\n\n<span class=\"mathquill\">\\mathbf{v_1} = [a, b, c, d]</span>\n\n<span class=\"mathquill\">\\mathbf{v_2} = [w, x, y, z]</span>, \n\nthen the dot product would be\n\n<span class=\"mathquill\">\\mathbf{v_1 \\cdot v_2} = aw+ bx + cy + dz</span>\n\nThis is another place where a for loop would be useful. You will figure out how to code the dot product in the exercises in the next section.\n\nYou'll see how to apply the dot product and why it is useful in the coding exercises.",
              "instructor_notes": ""
            },
            {
              "id": 395127,
              "key": "d22ea0b6-2a91-4d93-ac64-fe7dff949dfa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "###  Summary\n\nHere is a summary of what you will need to know about Python lists to complete the coding exercises:\n* assigning a vector - `myvector = [5, 9, 10 2, 20]`\n* accessing a value - `myvector[3]`\n* changing a value - `myvector[3] = 15`\n* appending a value to the end of the list - `myvector.append(6)`\n* and finally, using for loops to access and manipulate vectors:\n\n```python\nfor i in range(len(myvector)):\n\tmyvector[i]\n```\n\n\nCheck out this [link](https://docs.python.org/3/tutorial/datastructures.html) to learn about other methods that come with Python lists. You might find them useful although you will not need them for the following exercises.",
              "instructor_notes": ""
            },
            {
              "id": 407016,
              "key": "6fc90e8b-4eb0-4530-b6fe-2ca549c5dfa2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Next, you will practice coding vectors in Python.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 407007,
          "key": "c92fc4a4-124f-4645-844a-622b2b382ebc",
          "title": "Coding Vectors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c92fc4a4-124f-4645-844a-622b2b382ebc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 407015,
              "key": "4c323971-a86b-458d-a0b4-b072e79ba461",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "b16e02c2-dc50-4e3d-a64d-4db4a50d2300",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/1_vector_coding.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 418873,
          "key": "3f6c22fa-94e5-4bd5-a580-2b0ec35d4b49",
          "title": "Coding Vectors (solution)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3f6c22fa-94e5-4bd5-a580-2b0ec35d4b49",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 418876,
              "key": "26e744d2-66c1-468f-9e7f-2e52cdae7925",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "6b5c38b3-879e-4b0e-89be-ac11b4210211",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/1_vector_coding_solution.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 415817,
          "key": "66d34487-a5f3-45f5-9d96-f4a61b73cace",
          "title": "Guide to Mathematical Notation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "66d34487-a5f3-45f5-9d96-f4a61b73cace",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 415819,
              "key": "e3644594-085a-4691-a6e0-ff8b964209fa",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "01d5300c-67f0-40cb-a9b3-bd7e10fdf8b2",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/guide_to_mathematical_notation.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 394594,
          "key": "2d770014-7ad9-42f7-b5b2-99d198b0d75c",
          "title": "Matrices in Python",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2d770014-7ad9-42f7-b5b2-99d198b0d75c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394667,
              "key": "7027b1c0-fc05-4988-a9bc-9a4cdc1694d2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Vector versus Matrix\n\nVectors are one part of the Kalman filter equations. But you also need to be able to use matrices.\n\nYou've seen how Python can represent a vector in a list. A vector can be thought of like a simple grid with one row and a column for each element. If you thought of a vector like a grid, the vector <span class=\"mathquill\">\\begin{bmatrix}17, 25, 6, 2\\end{bmatrix}</span> would be represented like this:",
              "instructor_notes": ""
            },
            {
              "id": 394677,
              "key": "431f36c0-4ec6-4f94-90de-d7b942a90c9c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b7185c_vector-example/vector-example.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/431f36c0-4ec6-4f94-90de-d7b942a90c9c",
              "caption": "",
              "alt": "",
              "width": 623,
              "height": 155,
              "instructor_notes": null
            },
            {
              "id": 394679,
              "key": "599e2cf8-f03f-43c2-98e2-703a4fa123d4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "But you could also call this vector a matrix. This four element vector is a one by four matrix or 1x4. The one represents the number of rows and the four represents the number of columns.\n\nWhat if you rotated the boxes around so that they looked like this?\n<span class=\"mathquill\">\\begin{bmatrix}17 \\\\ 25 \\\\ 6 \\\\ 2 \\end{bmatrix}</span>",
              "instructor_notes": ""
            },
            {
              "id": 394684,
              "key": "73ec4ca7-fab2-45e6-8cba-4cabf847f61d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b71993_vector-column/vector-column.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/73ec4ca7-fab2-45e6-8cba-4cabf847f61d",
              "caption": "",
              "alt": "",
              "width": 168,
              "height": 584,
              "instructor_notes": null
            },
            {
              "id": 394685,
              "key": "208a7668-bef5-4834-86bc-09b939db724c",
              "title": "Rotated Vector",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "208a7668-bef5-4834-86bc-09b939db724c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you think? Would you consider the rotated version to still be a vector?",
                "answers": [
                  {
                    "id": "a1505171944021",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1505171960567",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 394687,
              "key": "18b2ad19-8081-4cc2-a19a-adef104e6d42",
              "title": "Vector as a Matrix",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "18b2ad19-8081-4cc2-a19a-adef104e6d42",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Any vector can also be thought of as a matrix. How many rows and how many columns are there in the vertical version of the vector shown in the above image?",
                "answers": [
                  {
                    "id": "a1505172127429",
                    "text": "4 rows, 4 columns",
                    "is_correct": false
                  },
                  {
                    "id": "a1505172197430",
                    "text": "1 row, 4 columns",
                    "is_correct": false
                  },
                  {
                    "id": "a1505172197911",
                    "text": "4 rows, 1 column",
                    "is_correct": true
                  },
                  {
                    "id": "a1505172198407",
                    "text": "1 row, 1 column",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 394688,
              "key": "354cc6e0-c879-4972-b263-3f732e57858e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Two Vectors\n\nWhat happens if you take a vector and duplicate the vector like this?",
              "instructor_notes": ""
            },
            {
              "id": 395129,
              "key": "66b449d4-6884-422f-8d0d-4c70b10400c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<span class=\"mathquill\">\\begin{bmatrix}\n17 &17 \\\\ 25 & 25 \\\\ 6 & 6 \\\\ 2 & 2\n\\end{bmatrix}</span>",
              "instructor_notes": ""
            },
            {
              "id": 394689,
              "key": "5ad5b808-2a3f-4e75-a5eb-c6760a14aa9d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b71bef_2vector-columns/2vector-columns.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5ad5b808-2a3f-4e75-a5eb-c6760a14aa9d",
              "caption": "",
              "alt": "",
              "width": 327,
              "height": 583,
              "instructor_notes": null
            },
            {
              "id": 394690,
              "key": "4618cff3-45cf-419e-9cfa-6fada59cebb3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, you have 4 rows and 2 columns for a 4x2 matrix. What about duplicating the horizontal vector? \n<span class=\"mathquill\">\\begin{bmatrix}\n17 & 25 & 6 & 2 \\\\ 17 & 25 & 6 & 2\n\\end{bmatrix}</span>",
              "instructor_notes": ""
            },
            {
              "id": 394691,
              "key": "99b1b5f8-06df-4cd5-b4e0-5afec739a906",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b71c68_copy-of-vector-example/copy-of-vector-example.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/99b1b5f8-06df-4cd5-b4e0-5afec739a906",
              "caption": "",
              "alt": "",
              "width": 619,
              "height": 297,
              "instructor_notes": null
            },
            {
              "id": 394692,
              "key": "9eb6486f-01a1-4c64-9106-2ec90cdd2d0c",
              "title": "Matrix Size",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9eb6486f-01a1-4c64-9106-2ec90cdd2d0c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the size of the matrix?",
                "answers": [
                  {
                    "id": "a1505172606742",
                    "text": "4x2",
                    "is_correct": false
                  },
                  {
                    "id": "a1505172622321",
                    "text": "2x2",
                    "is_correct": false
                  },
                  {
                    "id": "a1505172622881",
                    "text": "2x4",
                    "is_correct": true
                  },
                  {
                    "id": "a1505172623777",
                    "text": "4x4",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 394693,
              "key": "2e173899-2568-4829-a411-ffb09f5bed5d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Representing a Matrix in Python\n\nA matrix is thus a two-dimensional grid with m rows and n columns. Take a look at this matrix, which is a little larger than the examples so far.\n\n<span class=\"mathquill\">\\begin{bmatrix}\n17 & 25 & 6 & 2 & 16 \\\\ \n6 & 1 & 8 & 4 & 22 \\\\\n17 & 8 & 54 & 15 & 65 \\\\\n11 & 25 & 68 & 9 & 2\n\\end{bmatrix}</span>",
              "instructor_notes": ""
            },
            {
              "id": 394697,
              "key": "27ae39b3-2cbf-4fe2-8773-3a55d7531bf9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b71e25_full-matrix/full-matrix.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/27ae39b3-2cbf-4fe2-8773-3a55d7531bf9",
              "caption": "",
              "alt": "",
              "width": 779,
              "height": 598,
              "instructor_notes": null
            },
            {
              "id": 394774,
              "key": "2f10fba6-7713-4e79-bbf1-4c0cc68eb9ef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This matrix is 4x5; the matrix has 4 rows and 5 columns. \n\nHow would you represent a matrix like this in Python? Start with the top row <span class=\"mathquill\">\\begin{bmatrix}17, 25, 6, 2, 16\\end{bmatrix}</span>. When looking at the top row alone, it looks like a vector. And in Python, you were using lists to represent vectors.\n\nWhen representing matrices in Python, you can think of each row *as a vector*:\n\n```python\nfirst_row = [17, 25, 6, 2, 16]\n```\n\nWhat about the second row?\n```python\nsecond_row = [6, 1, 8, 4, 22]\n```\n\nAnd so on:\n```python\nthird_row = [17, 8, 54, 15, 65]\nfourth_row = [11, 25, 68, 9, 2]\n```",
              "instructor_notes": ""
            },
            {
              "id": 407678,
              "key": "795b090c-5d66-4920-b46b-3fc326090824",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Representing All Rows with One Variable\n\nYou are representing each row with its own variable. The next step is to represent the entire matrix with only one variable. \n\nIf you list all of the rows one after another, you get a list of lists:\n```python\nmatrix = [first_row, second_row, third_row, fourth_row]\n```\n\nThe \"matrix-ness\" is more explicit if you write it like this:\n\n```python\nmatrix = [\n    first_row,\n    second_row, \n    third_row, \n    fourth_row\n]\n```\n\nReplacing the variables with the vectors gives you a big list of lists:\n```\nmatrix = [[17, 25, 6, 2, 16], \n[6, 1, 8, 4, 22],\n[17, 8, 54, 15, 65],\n[11, 25, 68, 9, 2]]\n```\n\nor, slightly cleaner:\n\n```\nmatrix = [\n    [17, 25, 6, 2, 16], \n    [6, 1, 8, 4, 22],\n    [17, 8, 54, 15, 65], \n    [11, 25, 68, 9, 2]\n]\n```",
              "instructor_notes": ""
            },
            {
              "id": 394775,
              "key": "dd956b14-fb4c-4896-bbc4-fbd910c2c654",
              "title": "Matrix Access",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dd956b14-fb4c-4896-bbc4-fbd910c2c654",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you think the following code would print out?\n```\nmatrix = [\n[17, 25, 6, 2, 16], \n[6, 1, 45, 4, 22],\n[17, 8, 54, 15, 65],\n[11, 25, 68, 9, 2]\n]\n\nprint(matrix[3][2])\n```",
                "answers": [
                  {
                    "id": "a1505177678651",
                    "text": "Nothing  because you would get an error",
                    "is_correct": false
                  },
                  {
                    "id": "a1505177778274",
                    "text": "45",
                    "is_correct": false
                  },
                  {
                    "id": "a1505177779003",
                    "text": "8",
                    "is_correct": false
                  },
                  {
                    "id": "a1505177779563",
                    "text": "68",
                    "is_correct": true
                  },
                  {
                    "id": "a1505177821593",
                    "text": "15",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 407680,
              "key": "5a79fca7-5179-469d-becf-43c862f3e927",
              "title": "Coding Vectors as Matrices",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5a79fca7-5179-469d-becf-43c862f3e927",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "You just learned that a vector can also be thought of as a matrix. If you were to store the vector [1, 5, 9, 3, 1] as a Python matrix, what would the syntax be?",
                "answers": [
                  {
                    "id": "a1506054417236",
                    "text": "x = [1, 5, 9, 3, 1]",
                    "is_correct": false
                  },
                  {
                    "id": "a1506054498724",
                    "text": "x = 1, 5, 9, 3, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1506054507027",
                    "text": "x = [1 5 9 3 1]",
                    "is_correct": false
                  },
                  {
                    "id": "a1506054514659",
                    "text": "x = [[1, 5, 9, 3, 1]]",
                    "is_correct": true
                  },
                  {
                    "id": "a1506054521619",
                    "text": "x = [[1 5 9 3 1]]",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 394786,
              "key": "ebe84069-6792-482f-ad94-62e0170ce23f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Practice with Coding Matrices\n\nIn the next part of the lesson, you will practice coding matrices in Python.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 407677,
          "key": "087fb351-7e0c-429c-89b0-f5563f8a2fc7",
          "title": "Coding Matrices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "087fb351-7e0c-429c-89b0-f5563f8a2fc7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 407679,
              "key": "5b54da10-0cc5-4f04-87f8-7b2cbf5d7759",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "c6e5ba52-aa04-4261-828a-03ac752d96e6",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/2_matrices_in_python.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 415795,
          "key": "b135d1f5-04e4-4e63-bed8-cf3b0a2849e9",
          "title": "Coding Matrices (Solution)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b135d1f5-04e4-4e63-bed8-cf3b0a2849e9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 415797,
              "key": "52cec11f-0d32-4b4d-ab4e-bf0cac511cf0",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "86759a26-c4e2-45b8-b321-a18f084234d3",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/2_matrices_in_python_solution.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 394595,
          "key": "b2990cde-c254-4e73-9f87-bd1953853e24",
          "title": "Matrix Addition",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b2990cde-c254-4e73-9f87-bd1953853e24",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 394997,
              "key": "392cef4a-8869-4ee4-b22d-0c75caba9544",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Matrix Addition\n\nIn order to use the Kalman Filter equations, you will need to do matrix addition.\n\nFor example, the equation for calculating the error covariance matrix after the prediction step includes matrix addition:\n\n<span class=\"mathquill\">\\mathbf{P_{k|k-1}} = \\mathbf{F_{k}} \\mathbf{P_{k-1|k-1}} \\mathbf{F_{k}^T}  + \\mathbf{Q_{k}}</span>\n\nor, using our simplified notation:\n\n<span class=\"mathquill\">\\mathbf{P}' = \\mathbf{F} \\mathbf{P} \\mathbf{F^T}  + \\mathbf{Q}</span>\n",
              "instructor_notes": ""
            },
            {
              "id": 395134,
              "key": "e425a6ba-3a86-4ba5-bb7c-74ed1c9f5f2c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Matrix Addition General Formula\n\nAs a reminder, this is the general formula for carrying out matrix addition:\n\n<span class=\"mathquill\">\n\\mathbf{A} + \\mathbf{B} = \\begin{bmatrix}\na_{11} & a_{12}  & \\ldots  & a_{1n}\\\\ \na_{21} & a_{22}  & \\ldots &a_{2n} \\\\\n\\vdots & \\vdots & \\ddots  & \\vdots \\\\\na_{m1} & a_{m2}  & \\ldots  & a_{mn}\n\\end{bmatrix} + \n\\begin{bmatrix}\nb_{11} & b_{12}  & \\ldots  & b_{1n}\\\\ \nb_{21} & b_{22}  & \\ldots &b_{2n} \\\\ \n\\vdots & \\vdots  & \\ddots  & \\vdots \\\\ \nb_{m1} & b_{m2}  &  \\ldots & b_{mn}\n\\end{bmatrix}\n</span>",
              "instructor_notes": ""
            },
            {
              "id": 395135,
              "key": "3d0dca92-deac-48c1-aa71-0ff57d281175",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<span class=\"mathquill\">\n= \\begin{bmatrix}\na_{11}+b_{11} & a_{12}+b_{12}  & \\ldots  & a_{1n}+b_{1n} \\\\ \na_{21}+b_{21} & a_{22}+b_{22}  & \\ldots & a_{2n}+b_{2n} \\\\ \n\\vdots & \\vdots  & \\ddots  & \\vdots \\\\ \na_{m1}+b_{m1} & a_{m2}+b_{m2}  &  \\ldots & a_{mn}+b_{mn}\n\\end{bmatrix}\n</span>\n",
              "instructor_notes": ""
            },
            {
              "id": 395136,
              "key": "3d41be3b-33dd-4214-8628-23eafc249c54",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The first element of matrix A is added to the first element of matrix B. The second element gets added to the second element, etc. ",
              "instructor_notes": ""
            },
            {
              "id": 395139,
              "key": "f3d27cff-9296-42bc-b9d0-36bf1dd8f0a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Matrix Addition Concrete Example       \nHere is a concrete example of matrix addition:\n\n<span class=\"mathquill\">\n\\mathbf{A} + \\mathbf{B} =\n\\begin{bmatrix}\n17&25&6&2&16\\\\\n6&1&97&4&22\\\\\n80&8&54&15&65\\\\\n11&25&68&9&2\n\\end{bmatrix}\n+\n\\begin{bmatrix}\n3&14&1&7&42\\\\\n32&11&2&4&18\\\\\n19&81&4&8&5\\\\\n27&2&3&6&7\n\\end{bmatrix} = \n\\begin{bmatrix}\n20&39&7&9&58\\\\\n38&12&99&8&40\\\\\n99&89&58&23&70\\\\\n38&27&71&15&9\n\\end{bmatrix}\n</span>",
              "instructor_notes": ""
            },
            {
              "id": 395140,
              "key": "b2ae7afb-5fd4-4cb4-ae04-3b8a220e5e67",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The graphic below shows how to calculate the sum. You take an element in matrix A and then add the matching element in matrix B that has the same position. ",
              "instructor_notes": ""
            },
            {
              "id": 395141,
              "key": "ab85acf7-8fa0-4f25-b5b2-d999a49c2648",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b86cee_matrix-addition/matrix-addition.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ab85acf7-8fa0-4f25-b5b2-d999a49c2648",
              "caption": "",
              "alt": "",
              "width": 2025,
              "height": 1706,
              "instructor_notes": null
            },
            {
              "id": 395798,
              "key": "bd53ddc3-500d-40a2-802b-b61b0057925f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The top left element in matrix A is 17 and the top left element in matrix B is 3. The sum is 20, so the top left element of the resulting matrix is 20.\n\nHere is another example: The second row third column A value is 97. The second row third column B value is 2. The sum is 99, so the second row third column resulting matrix has the value 99.",
              "instructor_notes": ""
            },
            {
              "id": 395144,
              "key": "058141f5-1e57-409c-90a3-2fa40decdf69",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Characteristics of Matrix Addition\n\nYou will notice an important characteristic about matrix addition: the size of matrix A and matrix B need to be the same; in other words, they need the same number of rows and the same number of columns. If you go back to the Kalman Filter prediction equation shown at the top of the page, <span class=\"mathquill\">\\mathbf{P_{k|k-1}} = \\mathbf{F_{k}} \\mathbf{P_{k-1|k-1}} \\mathbf{F_{k}^T}  + \\mathbf{Q_{k}}</span>,\n\nthis means that the matrix <span class=\"mathquill\">\\mathbf{Q_{k}}</span> must be the same size as the matrix that results from multiplying <span class=\"mathquill\"> \\mathbf{F_{k}} \\mathbf{P_{k-1|k-1}} \\mathbf{F_{k}^T} </span>.\n\nFurthermore, the sum of two matrices will have the same size as well. So <span class=\"mathquill\">\\mathbf{P_{k|k-1}} \\text{as well as } \\mathbf{Q_{k}}</span> must have the same number of rows and columns.",
              "instructor_notes": ""
            },
            {
              "id": 395801,
              "key": "d03a7964-505b-42b0-bc7f-363ad07b7aa8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Matrix Subtraction\n\nTo subtract two matrices, the same rules apply. To find <span class=\"mathquill\">\\mathbf{A} - \\mathbf{B}</span>, you would subtract an element from B from its corresponding element in A.",
              "instructor_notes": ""
            },
            {
              "id": 395145,
              "key": "056d38d0-c0e6-4772-9075-e1915890a4d7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Coding Matrix Addition\n\nMatrix addition involves adding elements from the same position. So for S = matrix A + matrix B, you would need to do operations like these:\n```python\nS[0][0] = A[0][0] + B[0][0]\nS[0][1] = A[0][1] + B[0][1]\nS[0][2] = A[0][2] + B[0][2]\nS[0][3] = A[0][3] + B[0][3]\n.... etc\n\nS[1][0] = A[1][0] + B[1][0]\nS[1][1] = A[1][1] + B[1][1]\n...etc.\n```\n\nHowever, this code isn't very efficient for a number of reasons. You would have to write a line of code for every element in the matrix. If a matrix had 5 rows and 4 columns, you would need to write 20 lines of code. Another problem is that you won't always know beforehand how large your matrices will be. Your code might need to accommodate summing 5x4 matrices. But then your might also need to sum 10x2 matrices and any number of other configurations. \n\nThis is a perfect place to use nested for loops. ",
              "instructor_notes": ""
            },
            {
              "id": 395191,
              "key": "a013f92d-b3c9-49ff-a648-42cfef66e67d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Using For Loops to Code Matrix Addition\n\nIn the previous exercises, you wrote code to do scalar multiplication. You also wrote a function that prints out a matrix. \n\nThe code for matrix addition is very similar. So try to do it on your own in the IPython notebook exercises on the next page.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 407698,
          "key": "72f26ef8-4c5a-40ff-8dfe-f34ff3ca6588",
          "title": "Coding Matrix Addition",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "72f26ef8-4c5a-40ff-8dfe-f34ff3ca6588",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 407699,
              "key": "c9624464-be9a-42b0-8760-b27472623001",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "7bc1ce74-e660-4f43-8275-69017998d5dd",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/3_matrix_addition.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 394596,
          "key": "1f5edb8c-367f-4697-bfc4-623e066d94c6",
          "title": "Matrix Multiplication",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f5edb8c-367f-4697-bfc4-623e066d94c6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 395803,
              "key": "96a4d976-1648-43ee-b401-d1b046b49258",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Matrix Multiplication\n\nThe Kalman filter equations have many matrix multiplication operations. Actually, every equation involves a matrix multiplication operation.\n\nMatrix multiplication is different than matrix addition or subtraction. In matrix addition, you took an element from the first matrix, found the matching element in the second matrix, and outputted the sum.\n\nYou can multiply matching elements in a matrix as well, but that is called element-wise multiplication. Matrix multiplication is a different operation. And matrix multiplication is trickier to code.\n\nMultiplication of Matrix \n<span class=\"mathquill\">\\mathbf{A}</span>\n with matrix \n<span class=\"mathquill\">\\mathbf{B}</span> is only possible if the number of columns in \n<span class=\"mathquill\">\\mathbf{A}</span> is equal to the number of rows in\n<span class=\"mathquill\">\\mathbf{B}</span>. So if matrix <span class=\"mathquill\">\\mathbf{A}</span> is \n<span class=\"mathquill\">m \\times n</span>, then <span class=\"mathquill\">\\mathbf{B}</span> needs to be <span class=\"mathquill\">n \\times p</span>. The values for <span class=\"mathquill\">m</span> and <span class=\"mathquill\">p</span> can be any positive integer. \n\nThe result of <span class=\"mathquill\">\n\\mathbf{A} \\times \\mathbf{B}\n</span> is a matrix of size <span class=\"mathquill\">m \\times p</span>.",
              "instructor_notes": ""
            },
            {
              "id": 395805,
              "key": "ac7eb024-4abd-4790-97ae-5e3426b74f72",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Formal Definition of Matrix Multiplication\n\nHere is the formal equation for multiplying two matrices together:\n\n<span class=\"mathquill\">\n(\\mathbf{AB})_{ij} = \\sum_{k=1}^n a_{ik}b_{kj}\n</span>\n\nAll this is saying is that to find the element (i,j) in the resulting matrix, you need to\n*  take row i in matrix A, column j in matrix B\n* do element-wise multiplication on the i-row A vector and j-column B vector \n* sum the resulting elements\n\nBut you have already done element-wise multiplication and then summed the resulting elements of two vectors. That was the definition of the dot product in the vectors part of the lesson! Think of a matrix row as a vector and a matrix column also as a vector; you already wrote code for calculating the dot product.\n\nSo you are already part way done with coding matrix multiplication!",
              "instructor_notes": ""
            },
            {
              "id": 395822,
              "key": "97d5cd60-8ce6-4470-9bff-2ecf7efe57a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's go through a concrete example to see how matrix multiplication works. The two matrices being multiplied are:\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n17 & 25 & 6 & 2 \\\\\n6 & 1 & 97 & 4 \\\\\n80 & 8 & 54 & 15\n\\end{bmatrix} \\times\n\\begin{bmatrix}\n3 & 14 & 1 & 7 & 42 & 5 \\\\\n32 & 11 & 2 & 4 & 18 & 17 \\\\\n19 & 81 & 4 & 8 & 5 & 10 \\\\\n27 & 2 & 3 & 6 & 7 & 3\n\\end{bmatrix}\n= \n\\begin{bmatrix}\n1019 & 1003 & 97 & 279 &  1208 & 576 \\\\\n2001 & 7960 & 408 & 846 & 783 & 1029 \\\\\n1927 & 5612 & 357 & 1114 & 3879 & 1121\n\\end{bmatrix}\n</span>\n\nNote that matrix <span class=\"mathquill\">\\mathbf{A}</span> has three rows and four columns (3 x 4) and matrix <span class=\"mathquill\">\\mathbf{B}</span> has four rows and six columns (4 x 6). So the output is a 3 x 6 matrix. ",
              "instructor_notes": ""
            },
            {
              "id": 395833,
              "key": "317c3e42-3fa4-4caa-bcfc-1e6baea8c6b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Where did the number 1019 come from in row one, column one? According to the formula for matrix multiplication, it came from element-wise multiplication of the first row of matrix <span class=\"mathquill\">\\mathbf{A}</span> with the first column of matrix <span class=\"mathquill\">\\mathbf{B}</span>.\n\nThus you calculate the dot product of row one of A and column one of B. The dot product involves element-wise multiplication and then summing the results:\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n17 & 25 & 6 & 2 \n\\end{bmatrix}\n\\cdot\n\\begin{bmatrix}\n3 & 32 & 19 & 27\n\\end{bmatrix}\n</span>\n\n<span class=\"mathquill\">= 17 \\times 3  + 25 \\times 32 + 6 \\times 19 + 2 \\times 27</span>\n<span class=\"mathquill\">= 1019</span>\n\nSee the illustration below to see what is happening in more detail:",
              "instructor_notes": ""
            },
            {
              "id": 395834,
              "key": "8b6386a0-2cf3-4aab-ac22-08253e7fc82d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b9a825_matrix-multiplication-step1/matrix-multiplication-step1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8b6386a0-2cf3-4aab-ac22-08253e7fc82d",
              "caption": "",
              "alt": "",
              "width": 2113,
              "height": 1789,
              "instructor_notes": null
            },
            {
              "id": 395841,
              "key": "5b9adff2-65f9-4798-bf6b-b68c8f16cf84",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "How would you calculate the value in row one, column two?\n",
              "instructor_notes": ""
            },
            {
              "id": 395842,
              "key": "d61a75af-4204-4e58-ba9f-2d3a47a6c6a3",
              "title": "Row one Column two",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d61a75af-4204-4e58-ba9f-2d3a47a6c6a3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How would you calculate the result in row one, column two?",
                "answers": [
                  {
                    "id": "a1505341308449",
                    "text": "Take row one of A, column two of B, and calculate the dot product",
                    "is_correct": true
                  },
                  {
                    "id": "a1505341671146",
                    "text": "Take row two of A, column one of B, and calculate the dot product",
                    "is_correct": false
                  },
                  {
                    "id": "a1505341671825",
                    "text": "Take row one of A, column two of A, and calculate the dot product",
                    "is_correct": false
                  },
                  {
                    "id": "a1505341672337",
                    "text": "Take row one of B, column two of B, and calculate the dot product",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 395843,
              "key": "33db6db4-512b-4d88-9261-8235455081a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can see in the visualization below how to calculate the value in row one, column two.",
              "instructor_notes": ""
            },
            {
              "id": 395844,
              "key": "5ab5162b-0105-4e42-af52-6699e82c55e0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b9b3bb_matrix-multiplication-step2/matrix-multiplication-step2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5ab5162b-0105-4e42-af52-6699e82c55e0",
              "caption": "",
              "alt": "",
              "width": 2113,
              "height": 1789,
              "instructor_notes": null
            },
            {
              "id": 395845,
              "key": "dbd7bb3c-3ac1-4d51-a40b-9a431f73945a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Jumping ahead, here is how you would calculate row two, column four. You would need the second row of matrix <span class=\"mathquill\">\\mathbf{A}</span> and the fourth column of <span class=\"mathquill\">\\mathbf{B}</span>.",
              "instructor_notes": ""
            },
            {
              "id": 395868,
              "key": "e11c3622-d039-4657-9a8b-befb78d8d244",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b9bc4f_matrix-multiplication-step4/matrix-multiplication-step4.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e11c3622-d039-4657-9a8b-befb78d8d244",
              "caption": "",
              "alt": "",
              "width": 2113,
              "height": 1789,
              "instructor_notes": null
            },
            {
              "id": 395870,
              "key": "a9e5c337-c550-4974-8eb1-9ce5373e4a39",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Continuing with the process, you end up with \n<span class=\"mathquill\">\n\\begin{bmatrix}\n1019 & 1003 & 97 & 279 &  1208 & 576 \\\\\n2001 & 7960 & 408 & 846 & 783 & 1029 \\\\\n1927 & 5612 & 357 & 1114 & 3879 & 1121\n\\end{bmatrix}\n</span>\n\nNow it's your turn to code matrix multiplication in Python.",
              "instructor_notes": ""
            },
            {
              "id": 395889,
              "key": "86574ac7-f8ba-47e2-8d76-451fc04714b0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Coding Matrix Multiplication\n\nWriting code for matrix multiplication can be quite tricky. So you are going to build the solution in pieces. The good news is that coding matrix multiplication is a big part of this module's final project.\n\nThink about what matrix multiplication involves. You will multiply two matrices with sizes\n* m x n\n* n x p\n\nand output a matrix of size m x p.\n\nIn previous exercises, you already iterated through matrices using nested for loops. How could you use a nested for loop to calculate each element in the m x p matrix? And then once you have grabbed the necessary row in A and the necessary column in B, how will you combine the values to get the right answer?\n\nThe next page has an Ipython notebook where you can write your code.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 407700,
          "key": "1adb3cc4-5368-404e-8628-10b8a0ebd75c",
          "title": "Coding Matrix Multiplication",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1adb3cc4-5368-404e-8628-10b8a0ebd75c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 407701,
              "key": "ff4bc952-8b62-4edb-aa60-a381ac67033f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "eca44d7f-aa33-44ef-bfe8-9d42d1d53d08",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/4_matrix_multiplication.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 394597,
          "key": "c4d76ac4-168b-4c82-81b7-c2980e3e5d4c",
          "title": "Transpose of a Matrix",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c4d76ac4-168b-4c82-81b7-c2980e3e5d4c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 396457,
              "key": "d20f6d5c-08d1-49a1-8c61-5436968e33ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Transpose of a Matrix\n\nThere were a few Kalman filter equations that required the transpose of a matrix. You can identify these matrices because they have a T superscript. For example the transpose of matrix <span class=\"mathquill\">\\mathbf{A}</span> is written <span class=\"mathquill\">\\mathbf{A^T}</span>\n\nThese were the three equations that contained the transpose of a matrix:\n\n<span class=\"mathquill\">\\mathbf{P_{k|k-1}} = \\mathbf{F_{k}} \\mathbf{P_{k-1|k-1}} \\mathbf{F_{k}^T}  + \\mathbf{Q_{k}}</span>\n\n<span class=\"mathquill\">\\mathbf{S_{k}} = \\mathbf{H_{k}} \\mathbf{P_{k|k-1}} \\mathbf{H_{k}^T} + \n\\mathbf{R_{k}}</span>\n\n<span class=\"mathquill\">\\mathbf{K_{k}} = \\mathbf{P_{k|k-1}} \\mathbf{H_{k}^T} \\mathbf{S_{k}}^{-1}</span>\n",
              "instructor_notes": ""
            },
            {
              "id": 396460,
              "key": "95f6f840-bc23-4e2a-b746-fb5c576aa1c3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### What exactly is the transpose? \n\nYou can think of the tranpose as switching rows and columns. The matrix rows become the columns or alternatively you can consider the columns become the rows. \n\n\nHere is an example. If you start with this matrix,\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n3 & 25 & 9 & 2 & 4 \\\\ 7  & 15 & 6 & 92 & 17 \\\\31 & 18 & 0 & 11 & 8\n\\end{bmatrix}\n</span>\n\nthe transpose would be\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n3 & 7 & 31 \\\\ 25  & 15 & 18  \\\\ 9 & 6 & 0 \\\\ 2 & 92 & 11 \\\\ 4 & 17 & 8\n\\end{bmatrix}\n</span>\n\nThe original matrix was size 3x5. The transpose is 5x3. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 396469,
              "key": "8e44b890-02c7-4bb1-9870-1bd29432abd1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To get a better understanding of what is happening, this image is color coded to match values from the original matrix and the transpose of the matrix. If you think of switching the rows and making them into columns, the matrix operation looks like this:",
              "instructor_notes": ""
            },
            {
              "id": 396470,
              "key": "8df26bf0-dd6f-4dca-b433-e47df794495b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59bb140c_transpose-1/transpose-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8df26bf0-dd6f-4dca-b433-e47df794495b",
              "caption": "",
              "alt": "",
              "width": 1670,
              "height": 926,
              "instructor_notes": null
            },
            {
              "id": 396471,
              "key": "02357ba1-5037-4102-b68b-a8f9d54ef1cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "But you could also think of transposing the columns into rows:",
              "instructor_notes": ""
            },
            {
              "id": 396472,
              "key": "5b43555b-3025-4b4d-9acf-cb470429d3bb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59bb142a_transpose-2/transpose-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5b43555b-3025-4b4d-9acf-cb470429d3bb",
              "caption": "",
              "alt": "",
              "width": 1704,
              "height": 880,
              "instructor_notes": null
            },
            {
              "id": 396463,
              "key": "7bba3c1b-f9b1-4f51-b608-cb8aab23bb2f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Mathematically, you are switching around the i and j values for every element in the matrix. For example, the element in the 3rd row, 4th column is 11. For the transpose of the matrix, 11 is now in the 4th row, 3rd column. The formal mathematical definition of the transpose of a matrix is\n\n<span class=\"mathquill\">[\\mathbf{A^T}]_{ij} = [\\mathbf{A}]_{ji}</span>",
              "instructor_notes": ""
            },
            {
              "id": 396478,
              "key": "7851b4f4-6f34-4c72-b56d-af63a71739e8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Motivation for Calculating the Transpose\n\nIn order to use the Kalman filter equations, you need to calculate the transpose of both the <span class=\"mathquill\">\\mathbf{F} \\text{ and } \\mathbf{H}</span> matrices. \n\nBut there is also another place where you could use a matrix transposition: when carrying out matrix multiplication. In the previous exercises for matrix multiplication, you wrote a function that returned a column of a matrix. You needed matrix columns in order to find the dot product of a row from matrix <span class=\"mathquill\">\\mathbf{A}</span>  and a column from matrix <span class=\"mathquill\">\\mathbf{B}</span>.\n\nHere is a reminder of what that looked like:",
              "instructor_notes": ""
            },
            {
              "id": 408004,
              "key": "49ebb06c-e6ec-4423-b471-e21e219114ae",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59b9a825_matrix-multiplication-step1/matrix-multiplication-step1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/49ebb06c-e6ec-4423-b471-e21e219114ae",
              "caption": "",
              "alt": "",
              "width": 2113,
              "height": 1789,
              "instructor_notes": null
            },
            {
              "id": 408001,
              "key": "4a198dba-c37f-4c9f-b66d-f3fa5c4e77e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "But what happens if you take the transpose of matrix <span class=\"mathquill\">\\mathbf{B}</span>? All of the columns in <span class=\"mathquill\">\\mathbf{B}</span> become rows. Your matrix multiplication function  then involves finding the dot product between rows of <span class=\"mathquill\">\\mathbf{A}</span> and rows of <span class=\"mathquill\">\\mathbf{B^T}</span>:\n",
              "instructor_notes": ""
            },
            {
              "id": 408016,
              "key": "e4107b49-0be3-44b3-a3b2-5a37845b5769",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59c5594e_matrix-multiplication-transpose-1/matrix-multiplication-transpose-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e4107b49-0be3-44b3-a3b2-5a37845b5769",
              "caption": "Dot product between rows of A and transpose of matrix B",
              "alt": "Dot product between matrix A and transpose of matrix B",
              "width": 2076,
              "height": 1847,
              "instructor_notes": null
            },
            {
              "id": 408017,
              "key": "c9224a89-d2a8-48fb-934e-1aee8c8bb7bd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You are not calculating the product of <span class=\"mathquill\">AB^T</span>. Instead, you are taking advantage of matrix transposition to make matrix multiplication easier to code.\n\nIn the previous coding exercises, the get_column function you built to change a matrix column into a horizontal vector was essentially a transpose.\n\nIn the coding exercises for this part of the lesson, you will not only write a transpose function but also write a new multiplication function that takes advantage of the matrix transpose.",
              "instructor_notes": ""
            },
            {
              "id": 396477,
              "key": "305c5af8-0870-4782-a73c-329d3074d373",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Coding the Transpose of a Matrix\n\nThis is a similar problem to what you have already seen; you'll need to use nested for loops. But what exactly will this nested for loop look like? \n\nYou could iterate through the matrix like you've done already with the rows in the outer loop and the columns in the inner loop:\n```python\nfor i in range(len(matrixA)):\n    for j in range(len(matrixA[0])):\n        print(matrixA[i][j])\n```\n\nThe transpose of the matrix would need to store each i, j element inside a new matrix with position j, i. But how are you going to populate this new matrix? You would probably first need to create an n x m list within a list and populate this nested list with empty values. That sounds complicated.\n\nIs there a more efficient way to code matrix transposition? Think about how you could start iterating through the columns in the outside for loop and the rows on the inside for loop. \n\nGo to the next part of the lesson to write your code.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 407999,
          "key": "6344f367-7de8-4299-b9cf-ae7edc75e1ab",
          "title": "Coding the Transpose",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6344f367-7de8-4299-b9cf-ae7edc75e1ab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 408020,
              "key": "995b7ecb-3ed7-4aa0-a5fc-b1bb5c9e0c5d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "3a130131-1739-453c-ac7c-b28ff7d81568",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/5_matrix_transpose.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 407109,
          "key": "1b3d0019-7fca-40a3-83dd-c4e51c073f8b",
          "title": "The Identity Matrix",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1b3d0019-7fca-40a3-83dd-c4e51c073f8b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 408073,
              "key": "44f23b16-b72d-4ef5-9bb4-80e73988d693",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Identity Matrix\n\nThe identity matrix is a special matrix in linear algebra that shows up in quite a few applications. For the purposes of this lesson, gaining insight into the identity matrix will help you understand matrix inversion. The identity matrix is represented by the symbol <span class=\"mathquill\">\\mathbf{I}</span>. \n\n<span class=\"mathquill\">\\mathbf{I}</span> is an n x n square matrix with 1 across the main diagonal and 0 for all other elements.\n\nFor a 1x1 matrix, the identity matrix looks like this:\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n1\n\\end{bmatrix}\n</span>\n\nA 2x2 identity matrix looks like this:\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n1 & 0 \\\\ 0 & 1\n\\end{bmatrix}\n</span>\n\nThe 3x3 identity matrix is the following:\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & 1 & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix}\n</span>\n\nThe 4x4 identity matrix is:\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n1 & 0 & 0 & 0 \\\\\n0 & 1 & 0  & 0 \\\\\n0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 1\n\\end{bmatrix}\n</span>\n\n\nand so on.",
              "instructor_notes": ""
            },
            {
              "id": 408085,
              "key": "423ac830-c017-4208-9041-305afd90cbd4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Identity Matrix is like the Number One\n\nIn scalar multiplication, the number one has a special property:\n<span class=\"mathquill\">1\\times a = a</span>.\n\nLikewise, \n <span class=\"mathquill\">a\\times 1 = a</span>.\n\nIt turns out the Identity matrix has the same property:\n<span class=\"mathquill\">\\mathbf{AI} = \\mathbf{IA} = \\mathbf{A}</span>. And although the identity matrix is always square, matrix <span class=\"mathquill\">\\mathbf{A}</span> does not have to be square.\n\nHere is an example of multiplying\n<span class=\"mathquill\">\\mathbf{AI}</span>",
              "instructor_notes": ""
            },
            {
              "id": 408089,
              "key": "7aa00281-6453-41dc-8bcd-aa3ee129d4c9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59c56bf0_matrix-multiplication-identity-1/matrix-multiplication-identity-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7aa00281-6453-41dc-8bcd-aa3ee129d4c9",
              "caption": "",
              "alt": "",
              "width": 2113,
              "height": 1789,
              "instructor_notes": null
            },
            {
              "id": 408637,
              "key": "35167cdd-5c99-47ea-aedf-d2cab2df9ab6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "What about the other case of multiplying <span class=\"mathquill\">\\mathbf{IA}</span>? You'll need to take into account the dimensions of the I and A matrix so that the multiplication works.\n\nHow do you figure out the size of <span class=\"mathquill\">\\mathbf{I}</span>?\n\nThe output matrix has to be 3x4 just like <span class=\"mathquill\">\\mathbf{A}</span>. So a 3x3 matrix multiplied by a 3x4 matrix will give a 3x4 matrix.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 408638,
              "key": "e5623558-1757-4afe-9473-2ea4d6cfabeb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/September/59c588cb_matrix-multiplication-identity-reverse/matrix-multiplication-identity-reverse.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e5623558-1757-4afe-9473-2ea4d6cfabeb",
              "caption": "",
              "alt": "",
              "width": 2113,
              "height": 1789,
              "instructor_notes": null
            },
            {
              "id": 408640,
              "key": "a85f0a1b-c592-4954-aab7-3d12c459e480",
              "title": "Size of I",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a85f0a1b-c592-4954-aab7-3d12c459e480",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If A is a 5x7 matrix, what is the size of I when multiplying IA and the size of I when multiplying AI?",
                "answers": [
                  {
                    "id": "a1506117990354",
                    "text": "In both cases, I is size 7x5",
                    "is_correct": false
                  },
                  {
                    "id": "a1506118034745",
                    "text": "7x7 and 5x5",
                    "is_correct": false
                  },
                  {
                    "id": "a1506118035241",
                    "text": "5x5 and 7x7",
                    "is_correct": true
                  },
                  {
                    "id": "a1506118035690",
                    "text": "In both cases, I is size 5x7",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 408075,
              "key": "0307a7d0-51e0-4a29-8844-a931b8707a28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Initializing an Identity Matrix with Code\n\nIn the coding exercise, you will write a function that receives a size and outputs the identity matrix for that size.\n\nThink about how you might go about coding this starting from an empty Python list. The ones will always be at indicies \n* [0][0]\n* [1][1]\n* [2][2]\n* [3][3]\n* etc.\n\nEverywhere else in the matrix will be zero. So you will need to not only use nested for loops but also if else statements.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 408077,
          "key": "a89f5610-b49f-4727-ad3b-3afebac5b2ad",
          "title": "Coding Identity Matrix",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a89f5610-b49f-4727-ad3b-3afebac5b2ad",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 408882,
              "key": "b417aaff-6bf8-4dea-914d-29c29c37ec78",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "93f3c6de-0f60-4b19-93f6-792816acad7f",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/7_identity_matrix.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 394598,
          "key": "69758d47-e8b6-4f01-a5bd-60b196d198ac",
          "title": "Matrix Inverse",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "69758d47-e8b6-4f01-a5bd-60b196d198ac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 402199,
              "key": "6ed1e3db-9010-4e5d-8ccb-b82f825dead2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Matrix Inverse\n\nThere is one more matrix operation that you will need in order to use the Kalman Filter equations: the inverse of a matrix.\n\nSpecifically when calculating the Kalman filter gain matrix <span class=\"mathquill\">\\mathbf{K}</span>, you will need to take the inverse of the <span class=\"mathquill\">\\mathbf{S}</span> matrix. The superscript <span class=\"mathquill\">^{-1}</span> represents the inverse of a matrix. Here is a reminder of the Kalman Filter gain equations where you can see the need for the inverse of S. \n\n<span class=\"mathquill\">\\mathbf{S_{k}} = \\mathbf{H_{k}} \\mathbf{P_{k|k-1}} \\mathbf{H_{k}^T} + \n\\mathbf{R_{k}}</span>\n\n<span class=\"mathquill\">\\mathbf{K_{k}} = \\mathbf{P_{k|k-1}} \\mathbf{H_{k}^T} \\mathbf{S_{k}}^{-1}</span>\n\n",
              "instructor_notes": ""
            },
            {
              "id": 402301,
              "key": "98c3f8a6-b397-4d56-9493-aa964e888509",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Formal Definition of Inverse of a Matrix\n\nAs mentioned, the inverse of a matrix <span class=\"mathquill\">\\mathbf{A}</span> would be denoted by <span class=\"mathquill\">\\mathbf{A^{-1}}</span>. \n\nFormally, if matrix <span class=\"mathquill\">\\mathbf{A}</span> has an inverse, then \n\n<span class=\"mathquill\">\\mathbf{A} \\times \\mathbf{A^{-1}}</span> = <span class=\"mathquill\">\\mathbf{A^{-1}} \\times \\mathbf{A}</span> = <span class=\"mathquill\">\\mathbf{I}</span>\n\nwhere <span class=\"mathquill\">\\mathbf{I}</span> is an identity matrix. \n\nOnly square matrices, or in other words matrices with the same number of columns as rows, have inverses.  You can see that this must be true based on the definition of the inverse and the identity matrix. The identity matrix is always a square matrix, so\n\nif <span class=\"mathquill\">\\mathbf{A}</span> is m x n, then <span class=\"mathquill\">\\mathbf{A^{-1}}</span> has to be n x m to get a square identity matrix of m x m.\n\nMultiplying <span class=\"mathquill\">\\mathbf{A^{-1}} \\mathbf{A} </span> gives (n x m)(n x m) = n x m, which is not a square matrix unless n = m. \n\nSo in order for a matrix to have an inverse, the matrix must be square. At the same time, not all square matrices have inverses.",
              "instructor_notes": ""
            },
            {
              "id": 408893,
              "key": "d24c69df-eb07-4e8f-a67f-b264f1ab0d56",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Relationship between a Scalar Inverse and a Matrix Inverse\n\nIn scalar math, the inverse of a number <span class=\"mathquill\">x</span> is <span class=\"mathquill\">1/x</span>.\n\nIf you multiply a scalar by its inverse, you get 1:\n\n <span class=\"mathquill\">x \\times \\frac{1}{x} = 1</span>\n\nIn linear algebra, the inverse of a matrix is analogous to the scalar inverse:\n\n<span class=\"mathquill\">\\mathbf{A} \\times \\mathbf{A^{-1}} = \\mathbf{I}</span>\n\nAs you saw in the previous part of the lesson, the identity matrix has a similar role to the number 1.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 402328,
              "key": "2e779d63-3e38-41e8-9dd8-1abf4b986faa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Calculating the Inverse of a Matrix\n\nFor the purposes of this class, you will learn to calculate the inverse of a 1x1 matrix and a 2x2 matrix. \n\nFor matrices with more dimensions, the [calculations become more complicated](https://en.wikipedia.org/wiki/Invertible_matrix). Both Python and C++ have libraries that can calculate the inverse of a matrix such as the [NumPy Library](http://www.numpy.org/) and the [Eigen Library](http://eigen.tuxfamily.org/index.php?title=Main_Page).\n\n#### Inverse of a 1 x 1 matrix\n\nFor a <span class=\"mathquill\">1 \\times 1</span> matrix with a single element with value <span class=\"mathquill\">a</span>, the inverse is simply <span class=\"mathquill\">\\frac{1}{a}</span>.\n\nSo the inverse of \n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n25\n\\end{bmatrix}\n</span> is\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\n\\frac{1}{25}\n\\end{bmatrix}\n</span>.\n\n\n#### Inverse of a 2 x 2 matrix\n\nSay you have a matrix\n\n<span class=\"mathquill\">\n\\begin{bmatrix}\na & b \\\\ c & d\n\\end{bmatrix}\n</span>\n\n\nThe inverse of this 2 x 2 matrix is\n\n<span class=\"mathquill\">\n\\frac{1}{ad - bc}\n\\begin{bmatrix}\nd & -b \\\\ -c & a\n\\end{bmatrix}\n</span>\n\nAnd you can see that if <span class=\"mathquill\">ad = bc</span>, then the matrix does not have an inverse. \n\n##### Another formula for 2x2 inverse matrix\n\nHere is a more formal formula for the 2x2 inverse matrix. \n\n<span class=\"mathquill\">\\mathbf{A}^{-1} = \\frac{1}{\\text{det }\\mathbf{A}} \\left[\\left(\\text{tr } \\mathbf{A}\\right) \\mathbf{I} - \\mathbf{A}\\right]</span>\n\nwhere\n\n<span class=\"mathquill\">\\text{det }\\mathbf{A}</span> is called the determinant of a matrix. For a 2x2 matrix, the determinant is ad - bc. \n\n<span class=\"mathquill\">\\text{tr } \\mathbf{A}</span>  is called the trace of a matrix. The trace is the sum across the major diagonal, which in this case would be a + d.\n\nIf you multiply everything, you end up with the same equation already presented, namely:\n\n\n<span class=\"mathquill\">\\mathbf{A^{-1}} = \n\\frac{1}{ad - bc}\n\\begin{bmatrix}\nd & -b \\\\ -c & a\n\\end{bmatrix}\n</span>\n\n\n### Inverse of a 3 x 3 or larger matrix\n\nCalculating the inverse of a larger matrix involves relatively complex matrix algebra theory. In this course, you will only need to calculate the inverse of a 2 x 2 matrix.",
              "instructor_notes": ""
            },
            {
              "id": 402329,
              "key": "77127789-8883-44be-94e4-86f9e009386e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Coding the Inverse of a Matrix\n\nYou are going to write a function that calculates the inverse of a matrix. Remember that you will need to check the size of the matrix because a 1x1 matrix and a 2x2 matrix have different formulas.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 408078,
          "key": "c265bb4d-d9a8-4207-9b06-ea56411e1ffa",
          "title": "Coding Matrix Inverse",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c265bb4d-d9a8-4207-9b06-ea56411e1ffa",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 408079,
              "key": "3f579e64-4400-469a-b910-4e399b26e42e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewfbc2959b",
              "pool_id": "jupyter",
              "view_id": "8c7e695b-8362-43f9-a2b6-3a618bb0602e",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/6_inverse_matrix.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 458576,
          "key": "735e48b1-4780-4764-820b-3c5cbaf58c27",
          "title": "What to Take Away from this Lesson",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "735e48b1-4780-4764-820b-3c5cbaf58c27",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 458578,
              "key": "ed3d9268-954e-4a58-95ed-3648b2143cc3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What to Take Away from this Lesson\n\nYou just went through a lot of math! Remember: you don't need to memorize everything that was covered in this lesson.",
              "instructor_notes": ""
            },
            {
              "id": 458577,
              "key": "8c008e3c-a64a-4112-8b1e-ac979350a2cd",
              "title": "Nd113 Matrices L3 12 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "BRLmFGScL_k",
                "china_cdn_id": "BRLmFGScL_k.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}