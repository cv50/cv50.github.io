WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.615
回到 car.py 文件

00:00:02.615 --> 00:00:07.555
看看如何修改这个 car 对象并添加 color 变量

00:00:07.554 --> 00:00:09.300
在类代码中

00:00:09.300 --> 00:00:11.550
可以看出 car 有个默认颜色 红色

00:00:11.550 --> 00:00:14.845
用字符 r 表示

00:00:14.845 --> 00:00:16.875
如何自定义此设置？

00:00:16.875 --> 00:00:19.859
就像世界中的状态变量一样

00:00:19.859 --> 00:00:22.774
我们可以将其传入初始化参数中

00:00:22.774 --> 00:00:24.469
按照常规方式

00:00:24.469 --> 00:00:28.104
向 init 函数添加一个额外参数

00:00:28.105 --> 00:00:30.795
称此参数为 color

00:00:30.795 --> 00:00:35.545
还可以为 color 指定一个默认值 等于红色

00:00:35.545 --> 00:00:39.914
color = 'r' 表示

00:00:39.914 --> 00:00:41.295
仅在

00:00:41.295 --> 00:00:45.505
创建 car 对象时没有指定 color 参数的情况下

00:00:45.505 --> 00:00:47.615
它将默认为红色

00:00:47.615 --> 00:00:50.635
所有其他变量都没有默认值

00:00:50.634 --> 00:00:54.530
还要修改另一行代码

00:00:54.530 --> 00:00:57.634
将这个 self.color = 'r'

00:00:57.634 --> 00:01:00.500
改成 self.color = color

00:01:00.500 --> 00:01:03.734
这是在这里传入的变量

00:01:03.734 --> 00:01:07.780
现在 init 函数会初始化 car 的状态

00:01:07.780 --> 00:01:10.489
为其提供一个可遍历的二维世界

00:01:10.489 --> 00:01:13.059
并指定 car 的颜色

00:01:13.060 --> 00:01:17.180
只剩下在可执行代码中测试这些代码这一步了

00:01:17.180 --> 00:01:19.280
新建一个 notebook

00:01:19.280 --> 00:01:23.329
这是常规的 import 语句 我们导入 car 类文件

00:01:23.329 --> 00:01:27.745
这是常规的 import 语句 我们导入 car 类文件

00:01:27.745 --> 00:01:30.520
接下来 我将创建 car 对象

00:01:30.519 --> 00:01:32.899
我在这里定义初始化参数

00:01:32.900 --> 00:01:36.515
按照常规方式创建 carla

00:01:36.515 --> 00:01:41.765
然后 定义一些新的初始参数并创建新的 car 对象

00:01:41.765 --> 00:01:44.980
这次将 car 命名为 jeannette

00:01:46.950 --> 00:01:49.564
传入初始状态

00:01:49.564 --> 00:01:51.590
一个世界和颜色

00:01:51.590 --> 00:01:54.079
输入 jeanette = car.Car

00:01:54.078 --> 00:01:56.814
传入初始变量

00:01:56.814 --> 00:02:01.969
可以看出 我传入了初始状态变量 position2 和 velocity2

00:02:01.969 --> 00:02:04.010
传入相同的世界

00:02:04.010 --> 00:02:06.640
并且传入一个颜色

00:02:06.640 --> 00:02:10.194
用字符 y 指明 jeannette 是黄颜色

00:02:10.194 --> 00:02:12.659
它是最后一个传入的变量

00:02:12.659 --> 00:02:14.349
这些变量的顺序很重要

00:02:14.349 --> 00:02:17.219
应该与 car 类文件的顺序一致

00:02:17.219 --> 00:02:19.069
现在应该有两个 car 了 carla 和 jeannette

00:02:19.069 --> 00:02:23.194
我将运行这个 notebook 单元格

00:02:23.194 --> 00:02:25.680
如果在这一步出错了

00:02:25.680 --> 00:02:29.140
检查看看在更改之后是否保存了 car 类文件

00:02:29.139 --> 00:02:31.459
并重启 kernel 方法是点击 Kernel

00:02:31.460 --> 00:02:33.580
然后点击 Restart &amp; Clear Output

00:02:33.580 --> 00:02:35.555
因为我没有遇到任何错误

00:02:35.555 --> 00:02:39.260
所以下一步是为这两个 car 编写一些移动代码

00:02:39.259 --> 00:02:42.004
这只是为了好玩并看看可视化效果

00:02:42.004 --> 00:02:43.715
首先 我将移动 carla

00:02:43.715 --> 00:02:46.444
告诉 carla 移动 左转 然后再移动

00:02:46.444 --> 00:02:48.864
然后展示 carla 的世界

00:02:48.865 --> 00:02:50.700
可以看到 carla 的移动情况

00:02:50.699 --> 00:02:52.084
向前移动 左转

00:02:52.085 --> 00:02:53.550
然后在这个世界中循环

00:02:53.550 --> 00:02:55.475
看到颜色是红色

00:02:55.474 --> 00:02:58.479
红色是默认颜色

00:02:58.479 --> 00:03:02.569
因为我们在创建 carla 时没有指定颜色 往下滚动

00:03:03.330 --> 00:03:06.760
接下来我将移动 jeannette 左转 移动

00:03:06.759 --> 00:03:10.269
左转 再移动 展示 jeannette 的世界

00:03:10.270 --> 00:03:12.775
可以看出 jeannette 是从另一个点开始的

00:03:12.775 --> 00:03:15.480
循环形成不同的路径

00:03:15.479 --> 00:03:18.424
jeannette 是黄色的 路径也是

00:03:18.425 --> 00:03:20.005
很酷

00:03:20.004 --> 00:03:24.525
添加 car 颜色等更多变量只需几行代码就能搞定

00:03:24.525 --> 00:03:26.745
函数也一样

00:03:26.745 --> 00:03:30.960
可以向类中添加函数定义 然后访问这些函数

