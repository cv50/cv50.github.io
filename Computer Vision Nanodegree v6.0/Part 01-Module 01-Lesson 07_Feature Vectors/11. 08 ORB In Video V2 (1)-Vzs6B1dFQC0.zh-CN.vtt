WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.740
ORB 的一个常见用途是

00:00:01.740 --> 00:00:05.775
在实时视频流中跟踪和识别对象

00:00:05.775 --> 00:00:10.760
在这种情形下 我们在看到视频流之前

00:00:10.759 --> 00:00:13.980
计算要检测的任何图像或对象的 ORB 描述符并保存这些描述符

00:00:13.980 --> 00:00:17.160
然后 对于后续视频流中的每一帧

00:00:17.160 --> 00:00:20.760
我们计算 ORB 描述符并使用匹配函数

00:00:20.760 --> 00:00:24.570
将当前视频帧中的关键点与保存的描述符进行比较

00:00:24.570 --> 00:00:27.105
对于我们保存的任何对象描述符

00:00:27.105 --> 00:00:29.219
如果我们发现匹配函数返回的匹配数量

00:00:29.219 --> 00:00:31.799
超出了某个匹配阈值

00:00:31.800 --> 00:00:34.560
则可以判断对象位于视野内

00:00:34.560 --> 00:00:38.460
匹配阈值是你可以设置的自由参数

00:00:38.460 --> 00:00:43.210
例如 如果特定对象的 ORB 描述符有 100 个关键点

00:00:43.210 --> 00:00:46.265
那么你可以将阈值设为该对象的

00:00:46.265 --> 00:00:51.030
30% 50% 或 90% 关键点

00:00:51.030 --> 00:00:53.730
如果将阈值设为 35%

00:00:53.729 --> 00:00:58.739
这意味着描述该对象的 100 个关键点中

00:00:58.740 --> 00:01:02.160
必须至少有 35 个匹配 才表示该对象在视野内

00:01:02.159 --> 00:01:06.869
所有这些步骤可以几乎实时地完成

00:01:06.870 --> 00:01:08.910
因为 ORB 二元描述符的计算和比较速度非常快

00:01:08.909 --> 00:01:12.899
当你要检测的对象具有很多连续特征

00:01:12.900 --> 00:01:17.359
并且不受图像背景影响时 ORB 算法的效果最佳

00:01:17.359 --> 00:01:20.370
例如 ORB 适合人脸检测

00:01:20.370 --> 00:01:24.435
因为人脸有很多特征（例如眼角或嘴唇）

00:01:24.435 --> 00:01:27.885
不会改变 无论人站在何处

00:01:27.885 --> 00:01:30.795
这些特征在不同的图像中保持不变

00:01:30.795 --> 00:01:36.015
但是 如果要尝试更宽泛的对象识别时 ORB 的效果不怎么样

00:01:36.015 --> 00:01:38.760
例如检测图像中的行人

00:01:38.760 --> 00:01:41.085
因为人身体的形状和特征

00:01:41.084 --> 00:01:43.859
会因穿着和动作而改变

00:01:43.859 --> 00:01:46.665
对于此类一般对象识别

00:01:46.665 --> 00:01:48.810
其他算法的效果更好

00:01:48.810 --> 00:01:50.129
在下个部分

00:01:50.129 --> 00:01:54.159
我们将了解可以进行更宽泛的对象识别的方法

