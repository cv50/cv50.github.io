WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.785
ORB 特征检测的第一步是查找图像中的关键点

00:00:04.785 --> 00:00:06.839
这一步由 FAST 算法来完成

00:00:06.839 --> 00:00:10.259
FAST 是 Features from Accelerated Segments Test 的简称

00:00:10.259 --> 00:00:12.209
它通过对比给定像素区域内的亮度水平

00:00:12.210 --> 00:00:15.135
快速选择关键点

00:00:15.134 --> 00:00:18.390
给定图像中的一个像素我将称之为 p

00:00:18.390 --> 00:00:23.219
FAST 会比较 p 周围小圆圈中的 16 个像素

00:00:23.219 --> 00:00:29.009
该圆圈中的每个像素然后被分成三类

00:00:29.009 --> 00:00:31.125
比 p 亮 比 p 暗 或和 p 相似

00:00:31.125 --> 00:00:35.590
我将像素的亮度称为 Ip

00:00:35.590 --> 00:00:39.220
可以看做像素 p 的强度

00:00:39.219 --> 00:00:41.564
如果像素的亮度为 Ip

00:00:41.564 --> 00:00:43.579
则对于给定阈值 h

00:00:43.579 --> 00:00:47.125
更亮的像素将是亮度超过 Ip+h 的像素

00:00:47.125 --> 00:00:52.299
更暗的像素将是亮度低于 Ip-h 的像素

00:00:52.299 --> 00:00:56.244
相似像素将是亮度在这两个值之间的像素

00:00:56.244 --> 00:00:58.089
对像素分类后

00:00:58.090 --> 00:01:02.530
如果圈圈上有 8 个以上的相连像素

00:01:02.530 --> 00:01:07.325
暗于或亮于 p 则将像素 p 选作关键点

00:01:07.325 --> 00:01:11.010
FAST 如此高效的原因是

00:01:11.010 --> 00:01:15.180
仅将 p 与圆圈中的 4 个等距像素相比

00:01:15.180 --> 00:01:17.490
和与所有 16 个周围像素相比的效果一样 FAST 正是利用了这一事实

00:01:17.489 --> 00:01:20.909
例如 我们只需将 p 与像素 1

00:01:20.909 --> 00:01:23.129
5 9 和 13 相比

00:01:23.129 --> 00:01:25.739
在这种情形下 如果至少有一对连续像素的亮度高于或低于 p

00:01:25.739 --> 00:01:29.924
则将 p 选作关键点

00:01:29.924 --> 00:01:33.299
这种优化使得在整个图像中

00:01:33.299 --> 00:01:37.079
搜索关键点的时间缩短了四倍

00:01:37.079 --> 00:01:40.769
但是 这些关键点可以像我们提供什么样的信息？

00:01:40.769 --> 00:01:44.579
对比邻近像素的亮度有何意义？

00:01:44.579 --> 00:01:48.719
我们来看看 FAST 在这个猫图像上发现的一些关键点

00:01:48.719 --> 00:01:51.450
在眼部周围有关键点

00:01:51.450 --> 00:01:53.850
在鼻子周围有另一组关键点

00:01:53.849 --> 00:01:58.319
可以看出 关键点位于亮度有变化的区域

00:01:58.319 --> 00:02:01.454
此类区域通常确定了某种边缘

00:02:01.454 --> 00:02:03.209
例如猫的爪子

00:02:03.209 --> 00:02:05.609
边缘定义了猫的界限

00:02:05.609 --> 00:02:07.799
以及脸部区域的界限

00:02:07.799 --> 00:02:11.069
因此这些关键点使我们能够识别这只猫

00:02:11.069 --> 00:02:14.879
而不是图像中的任何其他对象或背景

00:02:14.879 --> 00:02:17.370
FAST 发现的关键点为我们提供了

00:02:17.370 --> 00:02:21.895
确定图像中定义对象的边缘所在位置的信息

00:02:21.895 --> 00:02:27.159
但是 需要注意的是 这些关键点仅提供了边缘位置

00:02:27.159 --> 00:02:31.000
并不包含关于强度变化方向的任何信息

00:02:31.000 --> 00:02:35.680
因此 现在我们可以区分水平边缘和垂直边缘了

00:02:35.680 --> 00:02:39.415
稍后我们将了解这种方向性在某些情形下很有用

00:02:39.414 --> 00:02:43.989
我们已经知道 ORB 如何使用 FAST 确定图像中的关键点

00:02:43.990 --> 00:02:46.885
我们将了解 ORB 如何使用 BRIEF 算法

00:02:46.884 --> 00:02:49.879
将这些关键点转换为特征向量

