WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.569
ORB 使用 FAST 检测图像中的关键点

00:00:03.569 --> 00:00:06.089
并且通过额外的几个步骤确保

00:00:06.089 --> 00:00:08.699
无论对象的大小或位置如何

00:00:08.699 --> 00:00:10.574
都能检测到图像中的对象

00:00:10.574 --> 00:00:14.980
给定一个图像 ORB 算法首先开始构建图像金字塔

00:00:14.980 --> 00:00:20.070
图像金字塔是单个图像的多尺度表示法

00:00:20.070 --> 00:00:22.350
由一系列原始图像的

00:00:22.350 --> 00:00:25.685
不同分辨率版本组成

00:00:25.684 --> 00:00:28.229
金字塔的每个级别都由

00:00:28.230 --> 00:00:31.304
上个级别的图像下采样版本组成

00:00:31.304 --> 00:00:34.695
下采样是指图像分辨率被降低

00:00:34.695 --> 00:00:38.359
在此示例中 图像按照 1/2 比例下采样

00:00:38.359 --> 00:00:40.560
因此一开始的 4x4 正方形区域

00:00:40.560 --> 00:00:44.010
现在变成 2x2 正方形

00:00:44.009 --> 00:00:46.649
图像的下采样包含更少的像素

00:00:46.649 --> 00:00:50.820
并且以 1/2 的比例降低大小

00:00:50.820 --> 00:00:54.630
这是一个包含 5 个级别的图形金字塔示例

00:00:54.630 --> 00:00:58.200
在每个级别 图像都以 1/2 的比例下采样

00:00:58.200 --> 00:01:00.330
到了第四级别

00:01:00.329 --> 00:01:03.585
图像的分辨率是原始图像的 1/16

00:01:03.585 --> 00:01:06.060
ORB 创建好图像金字塔后

00:01:06.060 --> 00:01:08.700
它会使用 FAST 算法

00:01:08.700 --> 00:01:12.825
从每个级别不同大小的图像中快速找到关键点

00:01:12.825 --> 00:01:18.120
因为金字塔的每个级别由原始图像的更小版本组成

00:01:18.120 --> 00:01:20.490
因此原始图像中的任何对象

00:01:20.489 --> 00:01:23.219
在金字塔的每个级别也会降低大小

00:01:23.219 --> 00:01:26.670
通过确定每个级别的关键点

00:01:26.670 --> 00:01:30.674
ORB 能够有效发现不同尺寸的对象的关键点

00:01:30.674 --> 00:01:33.759
这样的话 ORB 实现了部分缩放不变性

00:01:33.760 --> 00:01:36.750
这一点很重要 因为对象不太可能

00:01:36.750 --> 00:01:39.599
在每个图像中的大小都完全一样

00:01:39.599 --> 00:01:43.649
尤其是 像猫这样的对象某个时刻可能靠近相机

00:01:43.650 --> 00:01:46.365
在另一个时刻离相机很远 甚至躲起来

00:01:46.364 --> 00:01:51.074
现在 ORB 获得了与这个图像金字塔每个级别相关的关键点

00:01:51.075 --> 00:01:55.109
在发现金字塔所有级别中的关键点后

00:01:55.109 --> 00:01:58.459
ORB 现在为每个关键点分配一个方向

00:01:58.459 --> 00:02:01.079
例如朝左或朝右

00:02:01.079 --> 00:02:04.319
取决于该关键点周围的强度是如何变化的

00:02:04.319 --> 00:02:06.239
我们详细了解下背后原理

00:02:06.239 --> 00:02:10.674
ORB 首先选择金字塔级别 0 中的图像

00:02:10.675 --> 00:02:14.820
对于该图像 ORB 现在将计算关键点的方向

00:02:14.819 --> 00:02:19.509
方法是首先计算以该关键点为中心的方框中的强度形心

00:02:19.509 --> 00:02:21.780
强度形心可以看做

00:02:21.780 --> 00:02:25.469
给定 patch 中的平均像素强度的位置

00:02:25.469 --> 00:02:30.330
计算强度形心后 通过画一条

00:02:30.330 --> 00:02:32.535
从关键点到强度形心的向量

00:02:32.534 --> 00:02:35.835
获得该关键点的方向 如此处所示

00:02:35.835 --> 00:02:39.510
这个关键点的方向是向下并朝左

00:02:39.509 --> 00:02:44.280
因为这个区域的亮度朝着这个方向增强

00:02:44.280 --> 00:02:46.919
为金字塔级别 0 的图像中的

00:02:46.919 --> 00:02:50.039
每个关键点分配方向后

00:02:50.039 --> 00:02:54.764
ORB 现在为所有其他金字塔级别的图像重复相同流程

00:02:54.764 --> 00:02:57.419
需要注意的是 在每个图像金字塔级别

00:02:57.419 --> 00:03:00.194
Patch 大小没有缩减

00:03:00.194 --> 00:03:02.280
因此 相同 Patch 在每个金字塔级别

00:03:02.280 --> 00:03:05.580
覆盖的图像区域将更大

00:03:05.580 --> 00:03:09.960
导致关键点的大小各不相同 可以从此处看出这一点

00:03:09.960 --> 00:03:13.230
在此图中 圆圈表示每个关键点的大小

00:03:13.229 --> 00:03:17.609
更高的金字塔级别中的关键点大小更大

00:03:17.610 --> 00:03:21.450
找到关键点并为其分配方向后

00:03:21.449 --> 00:03:26.039
ORB 现在使用修改后的 BRIEF 版本创建特征向量

00:03:26.039 --> 00:03:29.250
这个修改后的 BRIEF 版本称为 rBRIEF

00:03:29.250 --> 00:03:32.039
即 Rotation-Aware BRIEF

00:03:32.039 --> 00:03:35.370
无论对象的方向如何 它都可以为关键点创建相同的向量

00:03:35.370 --> 00:03:38.985
使得 ORB 算法具有旋转不变性

00:03:38.985 --> 00:03:43.560
意味着它可以在朝着任何角度旋转的图像中检测到相同的关键点

00:03:43.560 --> 00:03:48.810
和 BRIEF 一样 rBRIEF 首先在给定关键点周围的已界定 patch 中

00:03:48.810 --> 00:03:54.585
随机选择 256 个像素对 以构建 256 位向量

00:03:54.585 --> 00:03:59.849
然后根据关键点的方向角度旋转这些随机像素对

00:03:59.849 --> 00:04:03.629
使随机点的方向与关键点的一致

00:04:03.629 --> 00:04:07.710
最后, rBRIEF 对比随机像素对的亮度

00:04:07.710 --> 00:04:12.450
并相应地分配 1 和 0 创建对应的特征向量

00:04:12.449 --> 00:04:16.740
为图像中的所有关键点创建的所有特征向量集合

00:04:16.740 --> 00:04:19.000
称之为 ORB 描述符

