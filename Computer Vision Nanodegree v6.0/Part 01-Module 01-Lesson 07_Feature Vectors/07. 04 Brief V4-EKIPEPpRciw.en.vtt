WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.839
The second part of the orb algorithm is to take the key points found by

00:00:03.839 --> 00:00:06.060
the first algorithm and turn those into

00:00:06.059 --> 00:00:09.464
feature vectors that together can represent an object.

00:00:09.464 --> 00:00:11.219
To create feature vectors,

00:00:11.220 --> 00:00:13.304
orb uses the BRIEF algorithm.

00:00:13.304 --> 00:00:17.640
BRIEF stands for binary robust independent elementary features,

00:00:17.640 --> 00:00:21.510
and its purpose is to create binary feature vectors from a set of key points.

00:00:21.510 --> 00:00:24.135
As we saw in the introduction video,

00:00:24.135 --> 00:00:25.679
a binary feature vector,

00:00:25.679 --> 00:00:27.809
also known as a binary descriptor,

00:00:27.809 --> 00:00:31.484
is just a feature vector that contains only ones and zeros.

00:00:31.484 --> 00:00:35.490
In BRIEF, each key point is described by a binary feature vector that has

00:00:35.490 --> 00:00:40.365
a 128-512 bits string that only contains ones and zeros.

00:00:40.365 --> 00:00:43.554
Just as a reminder, bit is short for a binary digit;

00:00:43.554 --> 00:00:46.695
and one bit can hold only a single binary value,

00:00:46.695 --> 00:00:48.255
either a one or a zero,

00:00:48.255 --> 00:00:50.895
and a bit string is just a group of bits.

00:00:50.895 --> 00:00:53.910
Here we see some examples of bit strings: the

00:00:53.909 --> 00:00:57.719
first is a one bit string therefore it only holds 1 bit,

00:00:57.719 --> 00:01:02.070
the second is a two bit string therefore it can hold 2 binary digits.

00:01:02.070 --> 00:01:04.469
In this case it holds a zero and one.

00:01:04.469 --> 00:01:09.510
Similarly, the third is a three bit string and so it can hold 3 bits and so on.

00:01:09.510 --> 00:01:12.609
Computers run on binary or machine code,

00:01:12.609 --> 00:01:16.109
and so the great advantage of using binary feature vectors is that they

00:01:16.109 --> 00:01:20.280
can be stored very efficiently in memory and they can be computed quickly.

00:01:20.280 --> 00:01:23.070
These properties not only make BRIEF very fast,

00:01:23.069 --> 00:01:25.379
which is crucial for real time applications,

00:01:25.379 --> 00:01:27.959
but they also allow BRIEF to run on devices with

00:01:27.959 --> 00:01:31.649
very limited computational resources, such as your smartphone.

00:01:31.650 --> 00:01:35.655
So, how does BRIEF create these binary descriptors for each point?

00:01:35.655 --> 00:01:38.969
The BRIEF algorithm starts by smoothing a given image with

00:01:38.969 --> 00:01:41.174
a Gaussian kernel in order to prevent

00:01:41.174 --> 00:01:44.564
the descriptor from being too sensitive to high frequency noise.

00:01:44.564 --> 00:01:48.060
Next, given a key point like the one here and the cat's paw,

00:01:48.060 --> 00:01:50.460
BRIEF selects a random pair of pixels

00:01:50.459 --> 00:01:53.099
inside a defined neighborhood around that key point.

00:01:53.099 --> 00:01:56.549
The neighborhood around the key point is known as a patch,

00:01:56.549 --> 00:01:59.159
which is a square with some pixel width and height.

00:01:59.159 --> 00:02:01.590
The first pixel in the random pair,

00:02:01.590 --> 00:02:03.299
shown here is a blue square,

00:02:03.299 --> 00:02:06.359
is drawn from a Gaussian distribution centered around the key point

00:02:06.359 --> 00:02:09.629
and with a standard deviation or a spread of Sigma.

00:02:09.629 --> 00:02:12.449
The second pixel in the random pair,

00:02:12.449 --> 00:02:14.109
shown here as a yellow square,

00:02:14.110 --> 00:02:16.860
is drawn from a Gaussian distribution centered around

00:02:16.860 --> 00:02:21.450
that first pixel and with a standard deviation of Sigma over 2.

00:02:21.449 --> 00:02:23.879
It's been shown empirically that this choice of

00:02:23.879 --> 00:02:26.745
Gaussians improves the feature matching rates.

00:02:26.745 --> 00:02:31.170
BRIEF then starts constructing the binary descriptor for the key point by comparing

00:02:31.169 --> 00:02:32.864
the brightness of the two pixels as

00:02:32.865 --> 00:02:36.200
follows: If the first pixel is brighter than the second,

00:02:36.199 --> 00:02:40.049
it assigns the value of one to the corresponding bit in the descriptor.

00:02:40.050 --> 00:02:42.765
Otherwise it assigns the value of zero.

00:02:42.764 --> 00:02:44.789
In this example we see here,

00:02:44.789 --> 00:02:47.009
the second pixel is brighter than the first pixel,

00:02:47.009 --> 00:02:51.120
so we assign a value of zero to the first bit of our feature vector.

00:02:51.120 --> 00:02:53.879
The first bit of the feature vector corresponds to

00:02:53.879 --> 00:02:57.254
the first random pair of points for this key point.

00:02:57.254 --> 00:02:59.460
Now, for the same key point,

00:02:59.460 --> 00:03:02.159
BRIEF selects a new random pair of pixels,

00:03:02.159 --> 00:03:07.049
compares their brightness and assigns one or zero to the next bit and the feature vector.

00:03:07.050 --> 00:03:10.965
In our example, we see that now the first pixel is brighter than the second,

00:03:10.965 --> 00:03:15.090
therefore we assign a value of one to the second bit in our feature vector.

00:03:15.090 --> 00:03:17.759
For a 256 bit vector,

00:03:17.759 --> 00:03:20.759
BRIEF then repeats this process for the same key point

00:03:20.759 --> 00:03:24.764
256 times before moving onto the next key point.

00:03:24.764 --> 00:03:28.829
The results of the 256 pixel brightness comparisons

00:03:28.830 --> 00:03:32.835
are then put into the binary feature vector for that one key point.

00:03:32.835 --> 00:03:36.840
BRIEF creates a vector like this for each key point in an image.

00:03:36.840 --> 00:03:39.780
Now, that you know how BRIEF constructs feature vectors

00:03:39.780 --> 00:03:42.390
for the key points found by first, next,

00:03:42.389 --> 00:03:45.029
we'll see how orb uses these to create vectors that are

00:03:45.030 --> 00:03:49.039
robust in the face of image rotation, scale and noise.

